Function: Matrix.help 
 -- Octarisk Class: OBJECT = Matrix(ID)
 -- Octarisk Class: OBJECT = Matrix()

     Class for setting up Matrix objects.

     This class contains all attributes and methods related to the
     following Matrix types:

     Correlation

     In the following, all methods and attributes are explained and code
     example is given.

     Methods for Matrix object OBJ:
        * Matrix(ID) or Matrix(): Constructor of a Matrix object.  ID is
          optional and specifies id and name of new object.

        * obj.set(ATTRIBUTE,VALUE): Setter method.  Provide pairs of
          attributes and values.  Values are checked for format and
          constraints.

        * obj.get(ATTRIBUTE): Getter method.  Query the value of
          specified attribute.

        * obj.getValue(XX,YY): Return matrix value for component on
          x-Axis XX and component on y-Axis YY.  Component values are
          recognized as strings.

        * Matrix.help(FORMAT,RETURNFLAG): show this message.  Format can
          be [plain text, html or texinfo].  If empty, defaults to plain
          text.  Returnflag is boolean.  True returns documentation
          string, false (default) return empty string.  [static method]

     Attributes of Matrix:
        * ID: Matrix id.  Has to be unique identifier.  Default: empty
          string.
        * NAME: Matrix name.  Default: empty string.
        * DESCRIPTION: Matrix description.  Default: empty string.
        * TYPE: Matrix type.  Can be [Correlation]

        * COMPONENTS: String cell specifying matrix components.  For
          symmetric correlation matrizes x and y-axis components are
          equal.
        * MATRIX: Matrix containing all elements.  Has to be of
          dimension n x n, while n is length of COMPONENTS cell.
        * COMPONENTS_XX: Set automatically while setting COMPONENTS cell
        * COMPONENTS_YY: Set automatically while setting COMPONENTS cell

     For illustration see the following example: A symmetric 3 x 3
     correlation matrix is specified and one specific correlation for a
     set of components as well as the whole matrix is retrieved:

          m = Matrix();
          component_cell = cell;
          component_cell(1) = 'INDEX_A';
          component_cell(2) = 'INDEX_B';
          component_cell(3) = 'INDEX_C';
          m = m.set('id','BASKET_CORR','type','Correlation','components',component_cell);
          m = m.set('matrix',[1.0,0.3,-0.2;0.3,1,0.1;-0.2,0.1,1]);
          m.get('matrix')
          corr_A_C = m.getValue('INDEX_A','INDEX_C')
Function: Curve.help 
 -- Octarisk Class: OBJECT = Curve(ID)
 -- Octarisk Class: OBJECT = Curve()

     Class for setting up Curve objects.

     This class contains all attributes and methods related to the
     following Curve types:

     Discount Curve, Spread Curve, Dummy Curve, Aggregated Curve,
     Prepayment Curve, Call Schedule, Put Schedule, Historical Curve,
     Inflation Expectation Curve, Shock Curve.

     In the following, all methods and attributes are explained and code
     example is given.

     Methods for Curve object OBJ:
        * Curve(ID) or Curve(): Constructor of a Curve object.  ID is
          optional and specifies id and name of new object.

        * obj.set(ATTRIBUTE,VALUE): Setter method.  Provide pairs of
          attributes and values.  Values are checked for format and
          constraints.

        * obj.get(ATTRIBUTE): Getter method.  Query the value of
          specified attribute.

        * obj.getRate(SCENARIO,NODE): Return scenario curve values at
          given node (in days).  Interpolation or Extrapolation is
          performed according to specified methods.  SCENARIO can be
          'base', 'stress' or a certain MC timestep like '250d'.

        * obj.getValue(SCENARIO): Return all scenario curve values.
          SCENARIO can be 'base', 'stress' or a certain MC timestep like
          '250d'.

        * obj.apply_rf_shocks(SCENARIO,RISKFACTOR_OBJECT): Set shock
          curve values for SCENARIO Scenario shocks from provided
          RISKFACTOR_OBJECT are used

        * obj.isProp(ATTRIBUTE): Return true, if attribute is a property
          of Curve class.  Return false otherwise.

        * Curve.help(FORMAT,RETURNFLAG): show this message.  Format can
          be [plain text, html or texinfo].  If empty, defaults to plain
          text.  Returnflag is boolean.  True returns documentation
          string, false (default) return empty string.  [static method]

     Attributes of Curves:
        * ID: Curve id.  Has to be unique identifier.  Default: empty
          string.
        * NAME: Curve name.  Default: empty string.
        * DESCRIPTION: Curve description.  Default: empty string.
        * TYPE: Curve type.  Can be [Discount Curve (default), Spread
          Curve, Dummy Curve, Aggregated Curve, Prepayment Curve, Call
          Schedule, Put Schedule, Historical Curve, Inflation
          Expectation Curve, Shock Curve]

        * DAY_COUNT_CONVENTION: Day count convention of curve.  See
          'help get_basis' for details.  Default: 'act/365'

        * BASIS: Basis belonging to day count convention.  Value is set
          automatically.
        * COMPOUNDING_TYPE: Compounding type.  Can be continuous,
          discrete or simple.  Default: 'cont'
        * COMPOUNDING_FREQ: Compounding frequency used for discrete
          compounding.  Can be [daily, weekly, monthly, quarterly,
          semi-annual, annual].  Default: 'annual'

        * CURVE_FUNCTION: Type Aggregated Curve only: Specifies how to
          aggregated curves, which are specified in attribute
          increments.  Can be [sum, product, divide, factor].  [sum,
          product, divide] specifies mathematical operation applied on
          all curve increments.  [factor] allows only one increment and
          uses CURVE_PARAMETER for multiplication.  Default: 'sum'
        * CURVE_PARAMETER: Type Aggregated Curve only: used as
          multiplication parameter for factor CURVE_FUNCTION.
        * INCREMENTS: Type Aggregated Curve only: List of IDs of all
          underlying curves.  Use CURVE_FUNCTION to specify how to
          aggregated curves.

        * METHOD_EXTRAPOLATION: Extrapolation method.  Can be 'constant'
          (default) or 'linear'.
        * METHOD_INTERPOLATION: Interpolation method.  See 'help
          interpolate_curve' for details.  Default: 'linear'.
        * UFR: Smith-Wilson Ultimate Forward Rate.  Used for
          Smith-Wilson interpolation and extrapolation.  Defaults to
          0.042.
        * ALPHA: Smith-Wilson Reversion parameter.  Used for
          Smith-Wilson interpolation and extrapolation.  Defaults to
          0.19.

        * CAP: Cap rate.  Cap rate is enforced on all set rates.  Set to
          empty string for no cap rate.  Default: empty string.
        * FLOOR: Floor rate.  Floor rate is enforced on all existing and
          future rates.  Set to empty string for no floor rate.
          Default: empty string.

        * NODES: Vector with curve nodes.
        * RATES_BASE: Vector with curve rates.  Has to be of same column
          size as NODES.
        * RATES_MC: Matrix with curve rates.  Has to be of same column
          size as NODES.  Columns: nodes, Lines: scenarios.  MC rates
          for several MC timesteps are stored in layers.
        * RATES_STRESS: Matrix with curve rates.  Has to be of same as
          NODES.  Columns correspond to nodes, lines correspond to
          scenarios.
        * TIMESTEP_MC: String Cell array with MC timesteps.
          Automatically appended if values for new timesteps are set.

        * SHOCKTYPE_MC: Specify how to apply risk factor shocks in Monte
          Carlo scenarios and for method apply_rf_shocks.  Can be
          [absolute, relative, sln_relative].  Automatically set by
          scripts.  Default: absolute
        * SHOCKTYPE_STRESS: Specify Stress risk factor shocks for method
          apply_rf_shocks.  Can be [absolute, relative] by stree
          scenario configuration.
        * SLN_LEVEL: Vector with term specific shift level for risk
          factors modelled with shifted log-normal model.  Automatically
          set by script during curve setup.
        * AMERICAN_FLAG: Flag for American (true) or European (false)
          call feature on bonds.  Valid only if Curve type is call or
          put schedule.  Default: false.

     For illustration see the following example: A discount curve c is
     specified.  A shock curve s provides absolute shocks for stress and
     relative shocks for MC scenarios, which are linearly interpolated
     and subsequently applied to the discount curve c.  In the end,
     stress and MC discount rates are interpolated for given nodes with
     method getRate, while all curve rates are extracted with getValue.

          c = Curve();
          c = c.set('id','Discount_Curve','type','Discount Curve', ...
          'nodes',[365,3650,7300],'rates_base',[0.01,0.02,0.04], ...
          'method_interpolation','linear','compounding_type','continuous', ...
          'day_count_convention','act/365');
          s = Curve();
          s = s.set('id','IR Shock','type','Shock Curve','nodes',[365,7300], ...
          'rates_base',[],'rates_stress',[0.01,0.01;0.02,0.02;-0.01,-0.01;-0.01,0.01], ...
          'rates_mc',[1.1,1.1;0.9,0.9;1.2,0.8;0.8,1.2],'timestep_mc','250d', ...
          'method_interpolation','linear','shocktype_stress','absolute', ...
          'shocktype_mc','relative');
          c = c.apply_rf_shock('stress',s);
          c = c.apply_rf_shock('250d',s);
          c_base = c.getRate('base',1825)
          c_rate_stress = c.getRate('stress',1825)
          c_rate_250d = c.getRate('250d',1825)
          c_rates_250d = c.getValue('250d')
