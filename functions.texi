@menu
* 	adapt_matlab::
* 	any2str::
* 	calcConvexityAdjustment::
* 	calibrate_evt_gpd::
* 	calibrate_generic::
* 	compile_oct_files::
* 	convert_curve_rates::
* 	correct_correlation_matrix::
* 	discount_factor::
* 	doc_instrument::
* 	doc_riskfactor::
* 	estimate_parameter::
* 	fmincon::
* 	generate_willowtree::
* 	getCapFloorRate::
* 	getFlooredSpotByFlooringForwardCurve::
* 	get_basis::
* 	get_basket_volatility::
* 	get_bond_tf_rates::
* 	get_cms_rate_hagan::
* 	get_cms_rate_hull::
* 	get_documentation::
* 	get_documentation_classes::
* 	get_forward_rate::
* 	get_gpd_var::
* 	get_marginal_distr_pearson::
* 	get_sub_object::
* 	get_sub_struct::
* 	harrell_davis_weight::
* 	ind2sub_tril::
* 	instrument_valuation::
* 	integrationtests::
* 	interpolate_curve::
* 	load_correlation_matrix::
* 	load_instruments::
* 	load_matrix_objects::
* 	load_mktdata_objects::
* 	load_positions::
* 	load_riskfactor_scenarios::
* 	load_riskfactor_stresses::
* 	load_riskfactors::
* 	load_stresstests::
* 	load_volacubes::
* 	load_yieldcurves::
* 	octarisk::
* 	option_asian_levy::
* 	option_asian_vorst90::
* 	option_barrier::
* 	option_binary::
* 	option_bjsten::
* 	option_bond_hw::
* 	option_bs::
* 	option_lookback::
* 	option_willowtree::
* 	perform_rf_stat_tests::
* 	pricing_forward::
* 	pricing_npv::
* 	print_class2dot::
* 	profiler_analysis::
* 	replacement_script::
* 	return_checked_input::
* 	rollout_structured_cashflows::
* 	save_objects::
* 	scenario_generation_MC::
* 	struct2obj::
* 	swaption_bachelier::
* 	swaption_black76::
* 	swaption_underlyings::
* 	test_io::
* 	test_oct_files::
* 	timefactor::
* 	unittests::
* 	unvech::
* 	update_mktdata_objects::
@end menu 
@node 	adapt_matlab
@section 	adapt_matlab
@cindex 	 Function 	adapt_matlab
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex
 Delete unneccessary scripts

@node 	any2str
@section 	any2str
@cindex 	 Function 	any2str
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} { [@var{output} @var{type}] =} any2str(@var{value})
Convert input value into string. Therefore a type dependent conversion is
performed. One output string ( a one-liner!) and the input type is returned.
Conversion is supported for scalars, matrizes up to three dimensions, cells,
boolean values and structs.
@end deftypefn

@node 	calcConvexityAdjustment
@section 	calcConvexityAdjustment
@cindex 	 Function 	calcConvexityAdjustment
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{adj_rate} @var{adj}] =} calcConvexityAdjustment (@var{valuation_date}, @var{instrument}, @var{r}, @var{sigma}, @var{t1}, @var{t2})

Return convexity adjustment to a given forward rate with specified forward
start and end dates and forward volatility. For CMS Rate adjustments use
function get_cms_rate. @*
Implementation of log-normal convexity adjustment according to H.P. Deutsch, 
Derivate und Interne Modelle, 4th Edition, Section 14.5 Convexity Adjustment.
Normal model convexity adjustment just uses absolute volatility (sigma) 
instead of relative volatility (sigma*r).
Input and output variables:
@itemize @bullet
@item @var{valuation_date}: valuation date [required] 
@item @var{instrument}: instrument struct or object (with model, basis) [required] 
@item @var{r}: forward rate [required] 
@item @var{sigma}: forward volatility (act/365 continuous) [required] 
@item @var{t1}: forward start date [required] 
@item @var{t2}: forward end date [required] 
@item @var{adj_rate}: OUTPUT: adjusted forward rate
@item @var{adj}: OUTPUT: adjustment only
@end itemize

@seealso{timefactor}
@end deftypefn

@node 	calibrate_evt_gpd
@section 	calibrate_evt_gpd
@cindex 	 Function 	calibrate_evt_gpd
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} { [@var{chi} @var{sigma} @var{u}] =} calibrate_evt_gpd(@var{v})

Calibrate sorted losses of historic or MC portfolio values 
to a generalized pareto distribution and returns chi, sigma and u as 
parameters for further VAR and ES calculation.
@*
Implementation according to @i{Risk Management and Financial Institutions} 
by John C. Hull, 4th edition, Wiley 2015, section 13.6, page 292ff.
@*
Explanation of Parameters:
@itemize @bullet
@item @var{v}:       INPUT: 	sorted profit and loss distribution of all 
								required tail events (1xN vector)
@item @var{chi}:     OUTPUT: Generalized Pareto distribution: shape 
								parameter (scalar)
@item @var{sigma}:   OUTPUT: scale parameter (scalar)
@item @var{u}:       OUTPUT: location parameter(scalar)
@end itemize
@end deftypefn

@node 	calibrate_generic
@section 	calibrate_generic
@cindex 	 Function 	calibrate_generic
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} { [@var{calibrated_value} @var{retcode}] =} calibrate_generic(@var{objf}, @var{x0}, @var{lb}, @var{ub}) 

Calibrate a given objective function according to start parameter and bounds.
This function calls the generic optimizer fmincon.
@seealso{fmincon}
@end deftypefn

@node 	compile_oct_files
@section 	compile_oct_files
@cindex 	 Function 	compile_oct_files
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex
 it is assumed that all oct files are in subfolder /oct_files

@node 	convert_curve_rates
@section 	convert_curve_rates
@cindex 	 Function 	convert_curve_rates
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{rate_target} @var{conversion_type}] =} convert_curve_rates (@var{valuation_date}, @var{node}, @var{rate_origin}, @var{comp_type_origin}, @var{comp_freq_origin}, @var{dcc_basis_origin}, @var{comp_type_target}, @var{comp_freq_target}, @var{dcc_basis_target})
Convert a given interest rate from one compounding type, frequency and day
count convention (dcc) into another type, frequency and dcc. @*

 The following conversion formulas are applied:  (the timefactor is 
 depending on day count convention and days between valuation_date and 
valuation_date + node)). Convert
 @example
 from CONT ->   SMP:    (exp(rate_origin .* timefactor_origin) -1) ...
./ timefactor_target
 from SMP ->    CONT:   ln(1 + rate_origin .* timefactor_origin) ...
./ timefactor_target
 from DISC ->   CONT:   ln(1 + rate_origin./ comp_freq_origin) ...
.* (timefactor_origin .* comp_freq_origin) ./ timefactor_target
 from CONT ->   DISC:   (exp(rate_origin .* timefactor_origin ...
./ (comp_freq_target .* timefactor_target)) - 1 ) .* comp_freq_target
 from SMP ->    DISC:   ( (1 + rate_origin .* timefactor_origin) ...
.^(1./( comp_freq_target .* timefactor_target)) -1 ) .* comp_freq_target
 from DISC ->   SMP:    ( (1 + rate_origin ./ comp_freq_origin ) ...
.^(comp_freq_origin .* timefactor_origin) -1 ) ./ timefactor_target
 from CONT ->   CONT:   rate_origin .* timefactor_origin ./ timefactor_target 
 from SMP ->    SMP:    rate_origin .* timefactor_origin ./ timefactor_target 
 from DISC ->   DISC:   ( (1 + rate_origin ./ comp_freq_origin) ...
.^((comp_freq_origin .* timefactor_origin) ./ ( comp_freq_target ...
.* timefactor_target)) -1 ) .* comp_freq_target
 @end example
 Please note: compounding_freq is only relevant for compounding type DISCRETE. 
 Otherwise it will be neglected. During object invocation, a default
 value for compounding_freq is set, even it is not required. Example call: @*
 @example
 0.006084365 = convert_curve_rates(datenum('31-Dec-2015'),643,0.0060519888,'cont','daily',3,'simple','daily',3)
 @end example
Input and output variables:
@itemize @bullet
@item @var{valuation_date}: 	base date used in timefactor calculation 
(datestr or datenum)
@item @var{node}: 			number of days until second date used in 
timefactor calculation (scalar)
@item @var{rate_origin}:     interest rate between first and second date 
(scalar)
@item @var{comp_type_origin}: compounding type of target rate: 
[simple, simp, disc, discrete, cont, continuous] (string)
@item @var{comp_freq_origin}: compounding frequency of target rate: 
1,2,4,12,52,365 or [daily,weekly,monthly,quarter,semi-annual,annual] 
(scalar or string)
@item @var{dcc_basis_origin}: day-count basis of target rate(scalar)
@item @var{comp_type_target}: compounding type of target rate: 
[simple, simp, disc, discrete, cont, continuous] (string)
@item @var{comp_freq_target}: compounding frequency of target rate: 
1,2,4,12,52,365 or [daily,weekly,monthly,quarter,semi-annual,annual] 
(scalar or string)
@item @var{dcc_basis_target}: day-count basis of target rate(scalar)
@item @var{rate_target}: 	OUTPUT: converted interest rate
@item @var{conversion_type}: OUTPUT: conversion type from x to y
@end itemize
@seealso{timefactor}
@end deftypefn

@node 	correct_correlation_matrix
@section 	correct_correlation_matrix
@cindex 	 Function 	correct_correlation_matrix
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{A_scaled} @var{pos_sem_def_bool}] =} correct_correlation_matrix(@var{M})
Return a positive semi-definite matrix @var{A_scaled} to a given input 
matrix @var{M}. This function tests for indefiniteness of the input matrix 
and eventuallry adjusts negative Eivenvalues to 0 or slightly positive values 
via some iteration steps.
@*
Reference: 'Implementing Value at Risk', Best, Philip W., 1998.
@end deftypefn

@node 	discount_factor
@section 	discount_factor
@cindex 	 Function 	discount_factor
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {@var{df} =} discount_factor (@var{d1}, @var{d2}, @var{rate}, @var{comp_type}, @var{basis}, @var{comp_freq})

Compute the discount factor for a specific time period, compounding type, 
day count basis and compounding frequency.@*

Input and output variables:
@itemize @bullet
@item @var{d1}: 			number of days until first date (scalar)
@item @var{d2}: 			number of days until second date (scalar)
@item @var{rate}: 		interest rate between first and second date (scalar)
@item @var{comp_type}: 	compounding type: [simple, simp, disc, discrete, 
cont, continuous] (string)
@item @var{basis}: 		day-count basis (scalar or string)
@item @var{comp_freq}: 	1,2,4,12,52,365 or [daily,weekly,monthly,
quarter,semi-annual,annual] (scalar or string)
@item @var{df}: 			OUTPUT: discount factor (scalar)
@end itemize
@seealso{timefactor}
@end deftypefn

@node 	doc_instrument
@section 	doc_instrument
@cindex 	 Function 	doc_instrument
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} { @var{object} =} Instrument (@var{name}, @var{id}, @var{description}, @var{type}, @var{currency}, @var{base_value}, @var{asset_class}, @var{valuation_date})
Instrument Superclass Inputs:
@itemize @bullet
@item @var{name} (string): Name of object
@item @var{id} (string): Id of object
@item @var{description} (string): Description of object
@item @var{type} (string): instrument type in list [cash, bond, debt, forward, 
option, sensitivity, synthetic]
@item @var{currency} (string): ISO code of currency
@item @var{base_value} (float): Actual base (spot) value of object
@item @var{asset_class} (sring): Instrument asset class
@item @var{valuation_date} (datenum): serial day number from Jan 1, 0000 
defined as day 1. 
@end itemize
@*
The constructor of the instrument class constructs an object with the 
following properties and inherits them to all sub classes: @*
@itemize @bullet
@item name: Name of object
@item id: Id of object
@item description: Description of object
@item value_base: Actual base (spot) value of object
@item currency: ISO code of currency
@item asset_class: Instrument asset class
@item type: Type of Instrument class (Bond,Forward,...) 
@item valuation_date: date format DD-MMM-YYYY 
@item value_stress: Vector with values under stress scenarios
@item value_mc: Matrix with values under MC scenarios (values per timestep 
per column)
@item timestep_mc: MC timestep per column (cell string)
@end itemize

@var{value} = Instrument.getValue (@var{base}, @var{stress}, @var{mc_timestep})
Superclass Method getValue 
@*
Return the scenario (shock) value for an instrument object. Specify the 
desired return values with a property parameter.
If the second argument abs is set, the absolut scenario value is calculated 
from scenario shocks and the risk factor start value.
@*
Timestep properties:
@itemize @bullet
@item base: return base value
@item stress: return stress values
@item 1d: return MC timestep
@end itemize
@*
@var{boolean} = Instrument.isProp (@var{property}) 
Instrument Method isProp
@*
Query all properties from the Instrument Superclass and sub classes and 
returns 1 in case of a valid property.
@*
@*
@seealso{Instrument}
@end deftypefn

@node 	doc_riskfactor
@section 	doc_riskfactor
@cindex 	 Function 	doc_riskfactor
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn  {Function File} { @var{object} =} Riskfactor ()
@deftypefnx  {Function File} { @var{object} =} Riskfactor (@var{name}, @var{id}, @var{type}, @var{description}, @var{model}, @var{parameters})

Construct risk factor object. Riskfactor Class Inputs:
@itemize @bullet
@item @var{name} (string): Name of object
@item @var{id} (string): Id of object
@item @var{type} (string): risk factor type
@item @var{description} (string): Description of object
@item @var{model} (string): statistical model in list [GBM,BM,SRD,OU]
@item @var{parameters} (vector): vector with values [mean,std,skew,kurt, ...
start_value,mr_level,mr_rate,node,rate]
@end itemize
If no input arguments are provided, a dummy IR risk factor object is generated.
@*
The constructor of the risk factor class constructs an object with the 
following properties: @*
Class properties:
@itemize @bullet
@item name: Name of object
@item id: Id of object
@item description: Description of object
@item type: risk factor type
@item model: risk factor model
@item mean: first moment of risk factor distribution
@item std: second  moment of risk factor distribution
@item skew: third  moment of risk factor distribution
@item kurt: fourth moment of risk factor distribution
@item start_value: Actual spot value of object 
@item mr_level: In case of mean reverting model this is the mean reversion 
level
@item mr_rate: In case of mean reverting model this is the mean reversion rate 
@item node: In case of a interest rate or spread risk factor this is the term node
@item rate:  In case of a interest rate or spread risk factor this is the term 
rate at the node
@item scenario_stress: Vector with values of stress scenarios
@item scenario_mc: Matrix with risk factor scenario values (values per 
timestep per column)
@item timestep_mc: MC timestep per column (cell string)
@end itemize

@var{property_value} = Riskfactor.getValue((@var{base,stress,mc_timestep}),'abs')
Riskfactor Method getValue 
@*
Return the value for a risk factor object. Specify the desired return values 
with a property parameter.
If the second argument abs is set, the absolut scenario value is calculated 
from scenario shocks and the risk factor start value.
@*
Timestep properties:
@itemize @bullet
@item base: return base value
@item stress: return stress values
@item any regular MC timestep (e.g. '1d'): return scenario (shock) values at 
MC timestep
@end itemize
@*
@var{property_value} = Riskfactor.get (property)
@var{object} = Riskfactor.set (property, value)
Riskfactor Methods get / set
@*
Get / set methods for retrieving or setting risk factor properties.
@*
@*
@seealso{Instrument}
@end deftypefn

@node 	estimate_parameter
@section 	estimate_parameter
@cindex 	 Function 	estimate_parameter
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {} estimate_parameter()
Calculate statistics for historic time series. This script is not used in 
octarisk process, but
it should simplify the parameter estimation for input parameters required for 
risk factor definitions. @*
The time series file (columns: risk factors, rows: historic values) will be 
generated by an python script (to be done). @*
The following statistic parameter are calculated: mean, volatility, skewness, 
kurtosis for simple, geometric and lognormal
distributed value. Moreover mean reversion rates and levels are calculated 
assuming ergodic and regression methods. @*
@end deftypefn

@node 	fmincon
@section 	fmincon
@cindex 	 Function 	fmincon
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} { [@var{x} @var{obj} @var{info} @var{iter} @var{nf} @var{lambda}] =} fmincon(@var{objf}, @var{x0}, @var{A}, @var{b}, @var{Aeq}, @var{beq}, @var{lb}, @var{ub})
Wrap basic functionality of Matlab's solver fmincon to Octave's sqp. @*
Non-linear constraint functions provided by fmincon's function handle 
@code{nonlincon} are NOT processed. @*
Return codes are also mapped according to fmincon expected return codes. 
Note: This function mimics the behaviour of fmincon only.@*
In order to speed up minimizing, a bounded minimization algorithm fminbnd
is used in a first try. If this fails, sqp algorithm is called.

Matlab:
@example
@group
A*x <= b
Aeq*x = beq
lb <= x <= ub
@end group
@end example
Octave: 
@example
@group
g(x) = -Aeq*x + beq = 0
h(x) = -A*x + b >= 0
lb <= x <= ub
@end group
@end example
See the following example:
@example
@group
[x obj info iter] = fmincon (@@(x)100*(x(2)-x(1)^2)^2 + (1-x(1))^2,[0.5,0],[1,2],1,[2,1],1)
x = [0.41494,0.17011]
obj =  0.34272
info =  1
iter =  6
@end group
@end example
Explanation of Input Parameters:
@*
@itemize @bullet
@item @var{objf}: pointer to objective function
@item @var{x0}: initial values
@item @var{A}: inequality constraint matrix
@item @var{b}: inequality constraint vector
@item @var{Aeq}: equality constraint matrix
@item @var{beq}: equality constraint vector
@item @var{lb}: lower bound (required for fminbnd, defaults to -10)
@item @var{ub}: upper bound (required for fminbnd, defaults to 10)
@end itemize
@seealso{sqp}
@end deftypefn

@node 	generate_willowtree
@section 	generate_willowtree
@cindex 	 Function 	generate_willowtree
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {@var{value} =} generate_willowtree (@var{N}, @var{dk}, @var{z_method}, @var{willowtree_save_flag}, @var{path_static})

Computes the willow tree used e.g. for option pricing.@*
The willow tree is used as a lean and accurate option pricing lattice.
This implementation of the willow tree concept is based on following
literature:
@itemize @bullet
@item 'Willow Tree', Andy C.T. Ho, Master thesis, May 2000
@item 'Willow Power: Optimizing Derivative Pricing Trees', Michael Curran, 
ALGO RESEARCH QUARTERLY, Vol. 4, No. 4, December 2001
@end itemize

Number of nodes must be in list [10,15,20,30,40,50]. These vectors are 
optimized by Currans Method to fulfill variance constraint (default: 20)

Variables:
@itemize @bullet
@item @var{N}: Number of timesteps in tree
@item @var{dk}: timestep size of tree
@item @var{z_method}: number of nodes per timestep
@item @var{willowtree_save_flag}: boolean variable for saving tree to file
@item @var{path_static}: path to directory if file shall be saved
@item @var{Transition_matrix}: [output] optimized transition probabilities 
("the Tree")
@item @var{z}: [output] Z(0,1) distributed random variables used in tree
@end itemize
@seealso{option_willowtree}
@end deftypefn

@node 	getCapFloorRate
@section 	getCapFloorRate
@cindex 	 Function 	getCapFloorRate
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{rate}] =} getCapFloorRate (@var{CapFlag}, @var{F}, @var{X}, @var{tf}, @var{sigma}, @var{model})

Compute the forward rate of caplets or floorlets according to Black, Normal or
analytical calculation formulas.

Input and output variables:
@itemize @bullet
@item @var{CapFlag}: model (Black, Normal) [required] 
@item @var{F}: forward rate (annualized) [required] 
@item @var{X}: strike rate (annualized) [required] 
@item @var{tf}: time factor until forward start date (in days) [required] 
@item @var{sigma}: swap volatility according to tenor, term and moneyness (act/365 continuous)[required] 
@item @var{model}: model (Black, Normal, Analytical) [required]
@item @var{rate}: OUTPUT: adjusted forward rate
@end itemize

For Black model, the following formulas are applied:
@example
@group
Caplet_rate = (F*N( d1) - X*N( d2))
Floorlet_rate = (X*N(-d2) - F*N(-d1))
d1 = (log(F/X) + (0.5*sigma^2)*T)/(sigma*sqrt(tf))
d2 = d1 - sigma*sqrt(tf)
@end group
@end example
@*
For Normal model, the following formulas are applied:
@example
@group
Caplet_rate = (F - X) * normcdf(d)  + sigma*sqrt(tf) * normpdf(d)
Floorlet_rate = (X - F) * normcdf(-d) + sigma*sqrt(tf) * normpdf(d)
d = (F - X) / (sigma*sqrt(tf));
@end group
@end example
@*
For analytical model, the following formulas are applied:
@example
@group
Caplet_rate = max(0, F - X);
Floorlet_rate = max(0, X - F);
@end group
@end example
@*
@seealso{swaption_bachelier, swaption_black76}
@end deftypefn

@node 	getFlooredSpotByFlooringForwardCurve
@section 	getFlooredSpotByFlooringForwardCurve
@cindex 	 Function 	getFlooredSpotByFlooringForwardCurve
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{TermForward} @var{spotrates_floored} @var{forwardrates}  @var{forwardrates_floored}] =} getFlooredSpotByFlooringForwardCurve(@var{TermSpot}, @var{SpotRates}, @var{floor_rate}, @var{term_forwardrate}, @var{basis}, @var{comp_type}, @var{comp_freq}, @var{interp_method})

Compute the floored spot curve calculated by flooring the forward curve.
@*
Explanation of Input Parameters:
@itemize @bullet
@item @var{TermSpot}: is a 1xN vector with all timesteps of the given curve
@item @var{SpotRates}: is MxN matrix with curve rates defined in columns. Each 
row contains a specific scenario with different curve structure
@item @var{floor_rate}: is a scalar, specifiying the floor applied to forward rates
@item @var{term_forwardrate}: is a scalar, specifiying forward period
@item @var{basis}: (optional) day count convention of instrument (default: act/365)
@item @var{comp_type}: (optional) specifies compounding rule (simple, 
discrete, continuous (defaults to 'cont')).
@item @var{comp_freq}: (optional) compounding frequency (default: annual)
@item @var{interp_method}: (optional) specifies interpolation method for 
retrieving interest rates (defaults to 'linear').
@end itemize
@*
Explanation of Output Parameters:
@itemize @bullet
@item @var{TermForward}: 1xN vector with all timesteps for output curves
@item @var{spotrates_floored}: MxN matrix with floored spot curves
@item @var{forwardrates}: MxN matrix with forward curves
@item @var{forwardrates_floored}: MxN matrix with floored forward curves
@end itemize
@seealso{timefactor}
@end deftypefn

@node 	get_basis
@section 	get_basis
@cindex 	 Function 	get_basis
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{basis} ] =} get_basis(@var{dcc_string})

Map the basis for value according to a day count convention string.
In order to introduce new day count conventions, add the basis to the cell
and include the calculation method for the day count convention into the
function timefactor(). 

The following mapping will be done for the input strings:
@itemize @bullet
@item @var{basis}: 		day-count basis (scalar)
		@itemize @bullet
			@item @var{0} = actual/actual or act/act (1/1 mapped to act/act)
			@item @var{1} = 30/360 SIA
			@item @var{2} = act/360 or actual/360 or actual/360 Full
			@item @var{3} = act/365 or actual/365 or actual/365 Full
			@item @var{4} = 30/360 PSA
			@item @var{5} = 30/360 ISDA
			@item @var{6} = 30/360 European
			@item @var{7} = act/365 Japanese
			@item @var{8} = act/act ISMA
			@item @var{9} = act/360 ISMA
			@item @var{10} = act/365 ISMA
			@item @var{11} = 30/360E
			@item @var{13} = 30/360 or 30/360 German
			@item @var{14} = business/252
			@item @var{15} = act/364
     @end itemize
@end itemize
@seealso{timefactor}
@end deftypefn

@node 	get_basket_volatility
@section 	get_basket_volatility
@cindex 	 Function 	get_basket_volatility
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{basket_vola}, @var{basket_dict} ] =} get_basket_volatility (@var{valuation_date}, @var{value_type}, @var{option}, @var{instrument_struct}, @var{index_struct}, @var{curve_struct}, @var{riskfactor_struct}, @var{matrix_struct}, @var{surface_struct})

Return diversified volatility for synthetic basket instruments.
The diversified volatility is dependent on the option maturity and strike,
so the volatility has to be calculated for each basket option valuation.
The following two methods are implemented:
@itemize @bullet
@item @var{Levy 1992}: Levy uses a log-normal density as a first-order 
approximation to the true density. This holds for small maturities or
volatilities only, since a weighted sum of log-normal distribution is not a log-normal
distribution by itself.
@item @var{VCV approach}: Assuming a normal distribution of underlying, the
basket volatility is calculated by sigma = sqrt(w'*C*w) with Covariance Matrix C
and the linear-combinations vector w.
@item @var{Beisser}: Calculate lower limit of option prices by adjusting
input volatilities and strikes. Also returns modified strike @var{basket_dict}.
@end itemize

@end deftypefn

@node 	get_bond_tf_rates
@section 	get_bond_tf_rates
@cindex 	 Function 	get_bond_tf_rates
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{tf_vec} @var{rate_vec} @var{df_vec}] =} get_bond_tf_rates(@var{valuation_date}, @var{cashflow_dates}, @var{cashflow_values}, @var{spread_constant}, @var{discount_nodes}, @var{discount_rates}, @var{basis}, @var{comp_type}, @var{comp_freq}, @var{interp_discount})

Compute the time factors, rates and discount factors for a
given cash flow pattern according to a given discount curve 
and day count convention etc.@*
Pre-requirements:@*
@itemize @bullet
@item installed octave financial package
@item custom functions timefactor, discount_factor, interpolate_curve, 
and convert_curve_rates
@end itemize

Input and output variables:
@itemize @bullet
@item @var{valuation_date}:  Structure with relevant information for 
specification of the forward:@*
@item @var{cashflow_dates}:  cashflow_dates is a 1xN vector with all 
timesteps of the cash flow pattern
@item @var{cashflow_values}: cashflow_values is a MxN matrix with cash flow 
pattern.
@item @var{spread_constant}: a constant spread added to the total yield 
extracted from discount curve and spread curve (can be used to spread over yield)
@item @var{discount_nodes}:  tmp_nodes is a 1xN vector with all timesteps of 
the given curve
@item @var{discount_rates}:  tmp_rates is a MxN matrix with discount curve 
rates defined in columns. Each row contains a specific scenario with different 
curve structure
@item @var{basis}:   OPTIONAL: day-count convention of instrument (either 
basis number between 1 and 11, or specified as string (act/365 etc.)
@item @var{comp_type}:   OPTIONAL: compounding type of instrument 
(disc, cont, simple)
@item @var{comp_freq}:   OPTIONAL: compounding frequency of instrument 
(1,2,3,4,6,12 payments per year)
@item @var{comp_type_curve}: OPTIONAL: compounding type of curve 
@item @var{basis_curve}: OPTIONAL: day-count convention of curve 
@item @var{comp_freq_curve}: OPTIONAL: compounding frequency of curve 
@item @var{interp_discount}: OPTIONAL: interpolation method of discount curve 
@item @var{sensi_flag}: OPTIONAL: boolean variable (calculate sensitivities)
(default: linear)
@item @var{tf_vec}: returns a Mx1 vector with time factors per cash flow date
@item @var{rate_vec}:  returns a Mx1 vector with rates per cf date
@item @var{df_vec}:  returns a Mx1 vector with discount factors per cf date
method)
@end itemize
@seealso{timefactor, discount_factor, interpolate_curve, convert_curve_rates}
@end deftypefn

@node 	get_cms_rate_hagan
@section 	get_cms_rate_hagan
@cindex 	 Function 	get_cms_rate_hagan
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {@var{forward_rate}=} get_cms_rate_hagan(@var{valuation_date}, @var{value_type}, @var{swap}, @var{curve}, @var{sigma}, @var{payment_date})

Compute the cms rate of an underlying swap floating leg incl. convexity 
adjustment. The implementation of cms convexity adjustment is based on
P.S. Hagan, Convexity Conundrums, 2003.
There is a minor issue with Hagans formulas: An adjustment to the 
value of the swaplet / caplet / floorlet is being calculated. For calculation 
of this adjustment a volatility is required. The volatility has to be 
interpolated from a given volatility cube with a given moneyness. In case of 
swaplets, the moneyness can be assumed to be 1.0. For caplets / floorlets, the 
moneyness can be calculated as (cms_rate-X) or (cms_rate/X). Here either the
adjusted cms rate or still the unadjusted cms rate can be used to calculate
the moneyness.@*
Explanation of Input Parameters:
@*
@itemize @bullet
@item @var{valuation_date}: valuation date
@item @var{value_type}: value type (e.g. base or stress)
@item @var{swap}: swap instrument object, underlying of cms swap
@item @var{curve}: discount curve object
@item @var{sigma}: volatility used for calculating convexity adjustment
@item @var{payment_date}: payment date of cashflow
@end itemize
@seealso{discount_factor, timefactor, rollout_structured_cashflows}
@end deftypefn

@node 	get_cms_rate_hull
@section 	get_cms_rate_hull
@cindex 	 Function 	get_cms_rate_hull
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {@var{forward_rate}=} get_cms_rate_hull(@var{valuation_date}, @var{value_type}, @var{swap}, @var{curve}, @var{sigma}, @var{model})

Compute the cms rate of an underlying swap floating leg incl. convexity 
adjustment. The implementation of cms convexity adjustment is based on
Hull: Option, Futures and other derivatives, 6th edition, page 734ff.
Explanation of Input Parameters:
@*
@itemize @bullet
@item @var{valuation_date}: valuation date
@item @var{value_type}: value type (e.g. base or stress)
@item @var{swap}: swap instrument object, underlying of cms swap
@item @var{curve}: discount curve object
@item @var{sigma}: volatility used for calculating convexity adjustment
@item @var{model}: volatility model used for calculating convexity adjustment
@end itemize
@seealso{discount_factor, timefactor, rollout_structured_cashflows}
@end deftypefn

@node 	get_documentation
@section 	get_documentation
@cindex 	 Function 	get_documentation
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {} get_documentation(@var{type}, @var{path_octarisk}, @var{path_documentation})
Print documentation for all Octave functions in specified path. 
The documentation is extracted from the function headers and printed to a 
file 'functions.texi', 'functionname.html' or to standard output if a  
specific format (texinfo,  html, txt) is set.

The path to all files has to be set in the variable path_documentation.
@end deftypefn

@node 	get_documentation_classes
@section 	get_documentation_classes
@cindex 	 Function 	get_documentation_classes
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {} get_documentation_classes(@var{type}, @var{path_octarisk}, @var{path_documentation})
Print documentation for all Octave Class definitions in specified path. 
The documentation is extracted from the static class methods and printed to a 
file 'functions.texi', 'functionname.html' or to standard output if a  
specific format (texinfo,  html, txt) is set.

The path to all files has to be set in the variable path_documentation.
@end deftypefn

@node 	get_forward_rate
@section 	get_forward_rate
@cindex 	 Function 	get_forward_rate
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {@var{forward_rate}=} get_forward_rate(@var{nodes}, @var{rates}, @var{days_to_t1}, @var{days_to_t2}, @var{comp_type}, @var{interp_method}, @var{comp_freq},, @var{basis}, @var{valuation_date}, @var{comp_type_curve}, @var{basis_curve}, @var{comp_freq_curve} , @var{floor_flag})

Compute the forward rate calculated from interpolated rates from a  
yield curve. CAUTION: the forward rate is floored to 0.000001.
Explanation of Input Parameters:
@*
@itemize @bullet
@item @var{nodes}: is a 1xN vector with all timesteps of the given curve
@item @var{rates}: is MxN matrix with curve rates defined in columns. Each 
row contains a specific scenario with different curve structure
@item @var{days_to_t1}: is a scalar, specifiying term1 in days
@item @var{days_to_t2}: is a scalar, specifiying term2 in days after term1
@item @var{comp_type}: (optional) specifies compounding rule (simple, 
discrete, continuous (defaults to 'cont')).
@item @var{interp_method}: (optional) specifies interpolation method for 
retrieving interest rates (defaults to 'linear').
@item @var{comp_freq}: (optional) compounding frequency (default: annual)
@item @var{basis}: (optional) day count convention of instrument (default: act/365)
@item @var{valuation_date}: (optional) valuation date (default: today)
@item @var{comp_type_curve}: (optional) compounding type of curve
@item @var{basis_curve}: (optional) day count convention of curve
@item @var{comp_freq_curve}: (optional) compounding frequency of curve
@item @var{floor_flag}: (optional) Bool: flooring forward rates to 0.000001
@end itemize
@seealso{interpolate_curve, convert_curve_rates,timefactor}
@end deftypefn

@node 	get_gpd_var
@section 	get_gpd_var
@cindex 	 Function 	get_gpd_var
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{VAR} @var{ES}] =} get_gpd_var(@var{chi}, @var{sigma}, @var{u}, @var{q}, @var{n}, @var{nu})
Return Value-at-risk (VAR) and expected shortfall (ES) according to a generalized Pareto distribution.
@*
Implementation according to @i{Risk Management and Financial Institutions} by John C. Hull, 4th edition, Wiley 2015, 
 section 13.6, page 292ff.
@*
Input and output variables:
@itemize @bullet
 @item @var{chi}: 	GPD shape parameter one (float)
 @item @var{sigma}: 	GPD shape parameter two (float)
 @item @var{u}:      offset level (float)
 @item @var{q}:      quantile (float in [0:1])
 @item @var{n}:      Number of scenarios in total distribution (integer)
 @item @var{nu}:     number of tail scenarios (in doubt set to 0.025 * n) (integer)
 @item @var{VAR}: 	OUTPUT: Value-at-Risk according to the GPD
 @item @var{ES}:     OUTPUT: Expected shortfall according to the GPD
@end itemize
Example call for calculation of VAR and ES for several confidence levels: 
 @example
     [VAR ES] = get_gpd_var(0.00001,1632.9,5930.8,[0.99;0.995;0.999],50000,1250)
 @end example
@end deftypefn

@node 	get_marginal_distr_pearson
@section 	get_marginal_distr_pearson
@cindex 	 Function 	get_marginal_distr_pearson
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{r} @var{type} ] =} get_marginal_distr_pearson (@var{mu}, @var{sigma}, @var{skew}, @var{kurt}, @var{Z})

Compute a marginal distribution for given set of uniform random variables 
with given mean, standard deviation skewness and kurtosis. The mapping is 
done via the Pearson distribution family.
@*
The implementation is based on the R package 'PearsonDS: Pearson Distribution 
System' and the function 'pearsonFitM' by @*
Martin Becker and Stefan Kloessner (2013) @* 
R package version 0.97. @*
URL: http://CRAN.R-project.org/package=PearsonDS @*
licensed under the GPL >= 2.0 @*
Input and output variables:
@itemize @bullet
@item @var{mu}: 		mean of marginal distribution (scalar)
@item @var{sigma}: 	standard deviation of marginal distribution (scalar)
@item @var{skew}: 	skewness of marginal distribution (scalar)
@item @var{kurt}: 	kurtosis of marginal distribution (scalar)
@item @var{Z}: 		uniform distributed random variables (Nx1 vector)
@item @var{r}: 		OUTPUT: Nx1 vector with random variables distributed 
according to Pearson type (vector)
@item @var{type}: 	OUTPUT: Pearson distribution type (I - VII) (scalar)
@end itemize
The marginal distribution type is chosen according to the input parameters 
out of the Pearson Type I-VII distribution family: @*
@itemize @bullet
@item @var{Type 0}   = normal distribution
@item @var{Type I}   = generalization of beta distribution
@item @var{Type II}  = symmetric beta distribution
@item @var{Type III} = gamma or chi-squared distribution
@item @var{Type IV}  = special distribution, not related to any other 
distribution
@item @var{Type V}   = inverse gamma distribution
@item @var{Type VI}  = beta-prime or F distribution
@item @var{Type VII} = Student's t distribution 
@end itemize
@seealso{discount_factor}
@end deftypefn

@node 	get_sub_object
@section 	get_sub_object
@cindex 	 Function 	get_sub_object
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{match_obj} @var{ret_code}] =} get_sub_object(@var{input_struct}, @var{input_id})
Return the object contained in a structure  matching a given ID. 
Return code 1 (success) and 0 (fail).
@end deftypefn

@node 	get_sub_struct
@section 	get_sub_struct
@cindex 	 Function 	get_sub_struct
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{match_struct} @var{ret_code}] =} get_sub_object(@var{input_struct}, @var{input_id})
Return the sub-structure contained in a structure matching a given ID. 
Return code 1 (success) and 0 (fail).
@end deftypefn

@node 	harrell_davis_weight
@section 	harrell_davis_weight
@cindex 	 Function 	harrell_davis_weight
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{X}] =} harrell_davis_weight (@var{scenarios}, @var{observation}, @var{alpha})

Compute the Harrell-Davis (1982) quantile estimator and jacknife standard errors of quantiles. 
The quantile estimator is a weighted linear combination or order statistics in which the order statistics used 
in traditional nonparametric quantile estimators are given the greatest weight. In small samples the H-D estimator 
is more efficient than traditional ones, and the two methods are asymptotically equivalent. 
The H-D estimator is the limit of a bootstrap average as the number of bootstrap resamples becomes infinitely large. 
@*
Variables:
@itemize @bullet
@item @var{scenarios}: number of total scenarios
@item @var{observation}: input vector for which HD weights shall be calculated
@item @var{alpha}: quantile (e.g. 0.005) 
@item @var{X}: OUTPUT: HD-weight corresponding to observation vector
@end itemize
@end deftypefn

@node 	ind2sub_tril
@section 	ind2sub_tril
@cindex 	 Function 	ind2sub_tril
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[ @var{r}, @var{c} ] = } ind2sub_tril (@var{N}, @var{idx})
Convert a linear index to subscripts of a trinagular matrix.

An example of trinagular matrix linearly indexed follows

@example
         N = 4;
         A = -repmat (1:N,N,1);
         A += repmat (diagind, N,1) - A.';
         A = tril(A)
         => A =
             1    0    0    0
             2    5    0    0
             3    6    8    0
             4    7    9   10
@end example

The following example shows how to convert the linear index `6' in
the 4-by-4 matrix of the example into a subscript.

@example
         [r, c] = ind2sub_tril (4, 6)
         => r =  2
           c =  3
@end example

when @var{idx} is a row or column matrix of linear indeces then @var{r} and
@var{c} have the same shape as @var{idx}.

@seealso{vech, ind2sub, sub2ind_tril}
@end deftypefn

@node 	instrument_valuation
@section 	instrument_valuation
@cindex 	 Function 	instrument_valuation
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{ret_instr_obj}] =} instrument_valuation (@var{instr_obj}, @var{valuation_date}, @var{scenario}, @var{instrument_struct}, @var{surface_struct}, @var{matrix_struct}, @var{curve_struct}, @var{index_struct}, @var{riskfactor_struct}, @var{path_static}, @var{scen_number}, @var{tmp_ts}, @var{first_eval})

Valuation of instruments according to instrument type.
The last four variables can be empty in case of base scenario valuation.
@*
Variables:
@itemize @bullet
@item @var{instr_obj}: instrument, which has to be valuated
@item @var{valuation_date}: valuation date
@item @var{scenario}: scenario ['base','stress', MC timestep: e.g. '250d'] 
@item @var{instrument_struct}: structure with all instruments in session
@item @var{surface_struct}: structure with all surfaces in session
@item @var{matrix_struct}: structure with all matrizes in session
@item @var{curve_struct}: structure with all curves in session
@item @var{index_struct}: structure with all indizes in session
@item @var{riskfactor_struct}: structure with all riskfactors in session
@item @var{para_struct}: structure with required parameters
@itemize @bullet
@item @var{para_struct.path_static}: OPTIONAL: path to folder with static files
@item @var{para_struct.scen_number}: OPTIONAL: number of scenarios
@item @var{para_struct.scenario}: OPTIONAL: timestep number of days for MC scenarios
@item @var{para_struct.first_eval}: OPTIONAL: boolean, first_eval == 1 means first evaluation
@end itemize
@item @var{ret_instr_obj}: RETURN: evaluated instrument object
@end itemize
@end deftypefn

@node 	integrationtests
@section 	integrationtests
@cindex 	 Function 	integrationtests
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {} integrationtests(@var{path_folder})
Call integrationtests of specified functions and return test statistics. @*
Input parameter: path to folder with testdata. All integration test scripts
have to be hard coded in this script.
@end deftypefn

@node 	interpolate_curve
@section 	interpolate_curve
@cindex 	 Function 	interpolate_curve
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {} interpolate_curve (@var{nodes}, @var{rates}, @var{timestep})
@deftypefnx {Function File} {} interpolate_curve (@var{nodes}, @var{rates}, @var{timestep}, @var{interp_method}, @var{ufr}, @var{alpha}, @var{extrap_method})

Calculate an interpolated rate on a curve for a given timestep.@*
Supported methods are: linear (default), moneymarket, exponential, loglinear, 
spline, smith-wilson, monotone-convex, constant (mapped to previous),
previous and next.

A constant extrapolation is assumed, except for smith-wilson, where the 
ultimate forward rate will be reached proportional to reversion speed alpha.
For all methods except splines a fast taylormade algorithm is used. For 
splines see Octave function interp1 for more details. 
Explanation of Input Parameters of the interpolation curve function:
@*
@itemize @bullet
@item @var{nodes}: is a 1xN vector with all timesteps of the given curve
@item @var{rates}: is MxN matrix with curve rates per timestep defined in
						columns. Each row contains a specific scenario with 
						different curve structure
@item @var{timestep}: is a scalar, specifiying the interpolated timestep on 
						vector nodes
@item @var{interp_method}: OPTIONAL: interpolation method
@item @var{ufr}:   OPTIONAL: (only used for smith-wilson): ultimate forward 
								rate (default: last liquid point)
@item @var{alpha}: OPTIONAL: (only used for smith-wilson): reversion speed 
								to ultimate forward rate (default: 0.1)
@item @var{extrap_method}: OPTIONAL: extrapolation method
@end itemize
@seealso{interp1, interp2, interp3, interpn}
@end deftypefn

@node 	load_correlation_matrix
@section 	load_correlation_matrix
@cindex 	 Function 	load_correlation_matrix
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{mktdata_struct} @var{id_failed_cell}] =} load_mktdata_objects(@var{mktdata_struct}, @var{path_mktdata}, @var{file_mktdata}, @var{path_output}, @var{path_archive}, @var{tmp_timestamp}, @var{archive_flag})
Load data from mktdata object specification file and generate objects with parsed data. Store all objects in provided mktdata struct and return the final struct and a cell containing the failed mktdata ids.
@end deftypefn

@node 	load_instruments
@section 	load_instruments
@cindex 	 Function 	load_instruments
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{instrument_struct} @var{id_failed_cell}] =} load_instruments(@var{instrument_struct}, @var{valuation_date}, @var{path_instruments}, @var{file_instruments}, @var{path_output}, @var{path_archive}, @var{tmp_timestamp}, @var{archive_flag})
Load data from instrument specification file and generate objects with parsed data. Store all objects in provided instrument struct and return the final struct and a cell containing the failed instrument ids.
The order of the final instrument struct is automatically set that all derivatives (OPT,SWAPT,SYNTH) are coming last.
@end deftypefn

@node 	load_matrix_objects
@section 	load_matrix_objects
@cindex 	 Function 	load_matrix_objects
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{matrix_struct} @var{matrix_failed_cell}] =} load_matrix_objects(@var{matrix_struct}, @var{path_mktdata}, @var{input_filename_matrix_index})
Load data from mktdata matrix object specification files and 
generate a struct with parsed data. Store all objects in provided struct 
and return the final struct and a cell containing the failed matrix ids.
@end deftypefn

@node 	load_mktdata_objects
@section 	load_mktdata_objects
@cindex 	 Function 	load_mktdata_objects
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{mktdata_struct} @var{id_failed_cell}] =} load_mktdata_objects(@var{mktdata_struct}, @var{path_mktdata}, @var{file_mktdata}, @var{path_output}, @var{path_archive}, @var{tmp_timestamp}, @var{archive_flag})
Load data from mktdata object specification file and generate objects with parsed data. Store all objects in provided mktdata struct and return the final struct and a cell containing the failed mktdata ids.
@end deftypefn

@node 	load_positions
@section 	load_positions
@cindex 	 Function 	load_positions
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{portfolio_struct} @var{id_failed_cell}] =} load_positions(@var{portfolio_struct}, @var{valuation_date}, @var{path_positions}, @var{file_positions}, @var{path_output}, @var{path_archive}, @var{tmp_timestamp}, @var{archive_flag})
Load data from position specification file and generate objects with parsed data. Store all objects in provided position struct and return the final struct and a cell containing the failed position ids.
@end deftypefn

@node 	load_riskfactor_scenarios
@section 	load_riskfactor_scenarios
@cindex 	 Function 	load_riskfactor_scenarios
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{riskfactor_struct} @var{rf_failed_cell}] =} load_riskfactor_scenarios(@var{riskfactor_struct}, @var{M_struct}, @var{mc_timesteps}, @var{mc_timestep_days})
Generate MC scenario shock values for risk factor curve objects. Store all MC scenario shock values in provided struct and return the final struct and a cell containing all failed risk factor ids.
@end deftypefn

@node 	load_riskfactor_stresses
@section 	load_riskfactor_stresses
@cindex 	 Function 	load_riskfactor_stresses
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{riskfactor_struct} @var{rf_failed_cell}] =} load_riskfactor_stresses(@var{riskfactor_struct}, @var{stresstest_struct})
Generate stresses for risk factor curve objects. Store all stresses in provided struct and return the final struct and a cell containing all failed risk factor ids.
@end deftypefn

@node 	load_riskfactors
@section 	load_riskfactors
@cindex 	 Function 	load_riskfactors
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{riskfactor_struct} @var{id_failed_cell}] =} load_riskfactors(@var{riskfactor_struct}, @var{valuation_date}, @var{path_riskfactors}, @var{file_riskfactors}, @var{path_output}, @var{path_archive}, @var{tmp_timestamp}, @var{archive_flag})
Load data from riskfactor specification file and generate objects with parsed data. Store all objects in provided riskfactor struct and return the final struct and a cell containing the failed riskfactor ids.
@end deftypefn

@node 	load_stresstests
@section 	load_stresstests
@cindex 	 Function 	load_stresstests
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{portfolio_struct} @var{id_failed_cell}] =} load_stresstests(@var{portfolio_struct}, @var{valuation_date}, @var{path_stresstests}, @var{file_stresstests}, @var{path_output}, @var{path_archive}, @var{tmp_timestamp}, @var{archive_flag})
Load data from stresstest specification file and generate a struct with 
parsed data. Store all stresstests in provided struct and return the final 
struct and a cell containing the failed position ids.
@end deftypefn

@node 	load_volacubes
@section 	load_volacubes
@cindex 	 Function 	load_volacubes
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{surface_struct} @var{vola_failed_cell}] =} load_volacubes(@var{surface_struct}, @var{path_mktdata}, @var{input_filename_vola_index}, @var{input_filename_vola_ir}, @var{input_filename_vola_stochastic})
Load data from mktdata volatility surfaces / cubes specification files and 
generate a struct with parsed data. Store all stresstests in provided struct 
and return the final struct and a cell containing the failed volatility ids.
@end deftypefn

@node 	load_yieldcurves
@section 	load_yieldcurves
@cindex 	 Function 	load_yieldcurves
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{rf_ir_cur_cell} @var{curve_struct}] =} load_yieldcurves(@var{curve_struct}, @var{riskfactor_struct}, @var{mc_timesteps}, @var{path_output}, @var{saving})
Generate curve objects from risk factor objects. Store all curves in provided 
struct and return the final struct and a cell containing all interest rate 
risk factor currency / ratings.
@end deftypefn

@node 	octarisk
@section 	octarisk
@cindex 	 Function 	octarisk
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {} octarisk (@var{path_working_folder})

Full valuation Monte-Carlo risk calculation framework.

See www.octarisk.com for further information.

@end deftypefn

@node 	option_asian_levy
@section 	option_asian_levy
@cindex 	 Function 	option_asian_levy
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {@var{value} =} option_asian_levy (@var{CallPutFlag}, @var{S}, @var{X}, @var{T}, @var{r}, @var{sigma}, @var{divrate}, @var{n})

Compute the prices of european type asian average price call or put options 
according to Levy (1992) valuation formula.
Convert all input parameter into continuously compounded values with act/365
day count convention.

The implementation is based on following literature:
@itemize @bullet
@item "Complete Guide to Option Pricing Formulas", Espen Gaarder Haug, 2nd Edition, page 190ff.
@end itemize
Variables:
@itemize @bullet
@item @var{CallPutFlag}: Call: "1", Put: "0"
@item @var{S}: stock price at time 0
@item @var{X}: strike price 
@item @var{T}: time to maturity in days 
@item @var{r}: annual risk-free interest rate (continuous, act/365)
@item @var{sigma}: annualized implied volatility 
@item @var{divrate}: dividend rate p.a. (continuous, act/365)
@item @var{n}: number of averaging dates (defaults to continuous: n = number of days to maturity)
@end itemize
@seealso{option_bs, option_asian_vorst90}
@end deftypefn

@node 	option_asian_vorst90
@section 	option_asian_vorst90
@cindex 	 Function 	option_asian_vorst90
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {@var{value} =} option_asian_vorst90 (@var{CallPutFlag}, @var{S}, @var{X}, @var{T}, @var{r}, @var{sigma}, @var{divrate})

Compute the prices of european type asian continously geometric average price 
call or put options  according to Kemna and Vorst (1990) valuation formula.
Convert all input parameter into continuously compounded values with act/365
day count convention.
The implementation is based on following literature:
@itemize @bullet
@item "Complete Guide to Option Pricing Formulas", Espen Gaarder Haug, 2nd Edition, page 183ff.
@end itemize
Variables:
@itemize @bullet
@item @var{CallPutFlag}: Call: "1", Put: "0"
@item @var{S}: stock price at time 0
@item @var{X}: strike price 
@item @var{T}: time to maturity in days 
@item @var{r}: annual risk-free interest rate (continuous, act/365)
@item @var{sigma}: annualized implied volatility (continuous, act/365)
@item @var{divrate}: dividend rate p.a. (continuous, act/365)
@end itemize
@seealso{option_bs, option_asian_levy}
@end deftypefn

@node 	option_barrier
@section 	option_barrier
@cindex 	 Function 	option_barrier
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{value}] =} option_barrier (@var{CallPutFlag}, @var{UpFlag}, @var{S}, @var{X}, @var{H}, @var{T}, @var{r}, @var{sigma}, @var{q}, @var{Rebate})

Compute the prices of European call or put out or in barrier options.@*
Reference: Espen Gaarder Haug, "Complete Guide to Option Pricing Formulas",  
2nd Edition, page 152ff.@*
Variables:
@itemize @bullet
@item @var{CallPutFlag}: Call: '1', Put: '0'
@item @var{UpFlag}: Up: 'U', Down: 'D'
@item @var{OutorIn}: 'out' or 'in' barrier option
@item @var{S}: stock price at time 0
@item @var{X}: strike price 
@item @var{H}: barrier
@item @var{T}: time to maturity in days 
@item @var{r}: annual risk-free interest rate (continuously compounded)
@item @var{sigma}: implied volatility of the stock price measured as annual 
standard deviation
@item @var{q}: dividend rate p.a., continously compounded
@item @var{Rebate}: Rebate of barrier option
@end itemize
@seealso{option_willowtree, swaption_black76, option_bs}
@end deftypefn

@node 	option_binary
@section 	option_binary
@cindex 	 Function 	option_binary
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{value}] =} option_binary (@var{CallPutFlag}, @var{binary_type}, @var{S}, @var{X1}, @var{X2}, @var{T}, @var{r}, @var{sigma}, @var{divrate})

Compute the prices of European Binary call or put options according to 
Reiner and Rubinstein (Unscrambling the Binary Code, RISK 4 (October 1991), 
pp. 75-83)  valuation formulas:@*
@*
Option type Gap@*
A gap call option pays the difference (gap) between spot and either one of two
strike values:
@example
@group
C(S,X1,X2,T) = X2*exp(-rT)*N(d)
P(S,X1,X2,T) = X2*exp(-rT)*N(-d)
d = (log(S/X1) + (r - divrate + 0.5*sigma^2)*T)/(sigma*sqrt(T))
@end group
@end example
@*
Option type Cash-or-Nothing@*
A cash or nothing option pays the pre-defined amount X2 if the value is larger
than the strike X1 (call option) or lower than the strike X1(put option):
@example
@group
C(S,X1,X2,T) = N(d)*X2*exp(-rT)
P(S,X1,X2,T) = N(-d)*X2*exp(-rT)
d = (log(S/X1) + (r - divrate - 0.5*sigma^2)*T)/(sigma*sqrt(T))
@end group
@end example
@*
Option type Asset-or-Nothing@*
An asset or nothing option pays the future spot value S if the value is larger
than the strike X1(call option) or lower than the strike X1 (put option):
@example
@group
C(S,X1,T) = S*N(d)*exp(-divrate*T)
P(S,X1,T) = S*N(-d)*exp(-divrate*T)
d = (log(S/X1) + (r - divrate + 0.5*sigma^2)*T)/(sigma*sqrt(T))
@end group
@end example
@*
Option type Supershare@*
A supershare option has a payoff, if the future spot values lies between
an lower bound X1 and upper bound X2, and is zero otherwise:
@example
@group
Value(S,X1,X2,T) = (S*exp(-divrate*T)/X1) * (N(d1) - N(d2))
d1 = (log(S/X1) + (r - divrate + 0.5*sigma^2)*T)/(sigma*sqrt(T))
d2 = (log(S/X2) + (r - divrate + 0.5*sigma^2)*T)/(sigma*sqrt(T))
@end group
@end example
@*
All formulas are taken from Haug, Complete Guide to Option Pricing Formulas,
2nd edition, page 174ff.@*
@*
Variables:
@itemize @bullet
@item @var{CallPutFlag}: Call: '1', Put: '0'
@item @var{binary_type}: can be 'gap','cash','asset'
@item @var{S}: stock price at time 0
@item @var{X1}: strike price (lower bound for supershare or gap options)
@item @var{X2}: payoff strike price (used for Gap and cash options, upper bound 
of supershare options)
@item @var{T}: time to maturity in days 
@item @var{r}: annual risk-free interest rate (continuously compounded, act/365)
@item @var{sigma}: implied volatility of the stock price measured as annual 
standard deviation
@item @var{divrate}: dividend rate p.a., continously compounded
@end itemize
@seealso{option_willowtree, option_bs}
@end deftypefn

@node 	option_bjsten
@section 	option_bjsten
@cindex 	 Function 	option_bjsten
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{value}] =} option_bjsten (@var{CallPutFlag}, @var{S}, @var{X}, @var{T}, @var{r}, @var{sigma}, @var{divrate})
Calculate the option price of an American call or 
put option stocks, futures, and currencies. The 
approximation method by Bjerksund and Stensland is used. @*

The Octave implementation is based on a R function 
implemented by Diethelm Wuertz 
Rmetrics - Pricing and Evaluating Basic Options, Date 2015-11-09
Version 3022.85 @*

 References:
   Haug E.G., The Complete Guide to Option Pricing Formulas
@*
Example taken from Reference:
@example
@group
price = option_bjsten(1,42,40,0.75*365,0.04,0.35,0.08)
price = 5.2704
@end group
@end example
Variables:
@itemize @bullet
@item @var{CallPutFlag}: Call: '1', Put: '0'
@item @var{S}: stock price at time 0
@item @var{X}: strike price 
@item @var{T}: time to maturity in days 
@item @var{r}: annual risk-free interest rate (continuously compounded)
@item @var{sigma}: implied volatility of the stock price measured as annual 
standard deviation
@item @var{divrate}: dividend rate p.a., continously compounded
@end itemize
@seealso{option_willowtree, option_bs}
@end deftypefn 

@node 	option_bond_hw
@section 	option_bond_hw
@cindex 	 Function 	option_bond_hw
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{value}] =} option_bond_hw (@var{value_type},@var{bond},@var{curve},@var{callschedule},@var{putschedule})

Compute the value of a put or call bond option using Hull-White Tree model.

This script is a wrapper for the function pricing_callable_bond_cpp
and handles all input and ouput data. Input data: value type,
bond instrument, curve instrument, call and put schedule.
References:
@itemize @bullet
@item Hull, Options, Futures and other derivatives, 7th Edition
@end itemize

@seealso{pricing_callable_bond_cpp}
@end deftypefn

@node 	option_bs
@section 	option_bs
@cindex 	 Function 	option_bs
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{value} @var{delta} @var{gamma} @var{vega} @var{theta} @var{rho} @var{omega}] =} option_bs (@var{CallPutFlag}, @var{S}, @var{X}, @var{T}, @var{r}, @var{sigma}, @var{divrate})

Compute the prices of european call or put options according to Black-Scholes 
valuation formula:@*
@example
@group
C(S,T) = N(d_1)*S - N(d_2)*X*exp(-rT)
P(S,T) = N(-d_2)*X*exp(-rT) - N(-d_1)*S
d1 = (log(S/X) + (r + 0.5*sigma^2)*T)/(sigma*sqrt(T))
d2 = d1 - sigma*sqrt(T)
@end group
@end example
The Greeks are also computed (delta, gamma, vega, theta, rho, omega) by 
their closed form solution. @*
Parallel computation for column vectors of S,X,r and sigma is possible. @*
@*
Variables:
@itemize @bullet
@item @var{CallPutFlag}: Call: '1', Put: '0'
@item @var{S}: stock price at time 0
@item @var{X}: strike price 
@item @var{T}: time to maturity in days 
@item @var{r}: annual risk-free interest rate (continuously compounded, act/365)
@item @var{sigma}: implied volatility of the stock price measured as annual 
standard deviation
@item @var{divrate}: dividend rate p.a., continously compounded
@end itemize
@seealso{option_willowtree, swaption_black76}
@end deftypefn

@node 	option_lookback
@section 	option_lookback
@cindex 	 Function 	option_lookback
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{value}] =} option_lookback (@var{CallPutFlag}, @var{lookback_type}, @var{S}, @var{X1}, @var{X2}, @var{T}, @var{r}, @var{sigma}, @var{divrate})

Compute the prices of European Lookback call or put options of type
floating strike or fixed strike.@*
@*
Floating Strike options:@*
A floating strike lookback call / put gives you the right to buy / sell the
the underlying security at the lowest / highest price observed during options
lifetime. Pricing according to Goldman, Sosin and Gatto (1979) ("Path dependent
options: Buy at the Low Sell at the High", Journal of Finance, 34(5), 1111-
1127) valuation formulas.@*
@*
Fixed Strike options:@*
A fixed strike lookback call / put pays out the maximum of the difference 
between the highed observed price and the strike and 0 (call option) or the maximum
of the difference between strike and lowest observed price and 0 (put option).
Pricing according to Conze and Viswanathan (1991) ("Path dependent
options: The Case of Lookback Options", Journal of Finance, 36, 1893 - 1907)
formulas.
@*
@*
All formulas are taken from Haug, Complete Guide to Option Pricing Formulas,
2nd edition, page 141ff.@*
@*
Variables:
@itemize @bullet
@item @var{CallPutFlag}: Call: '1', Put: '0'
@item @var{lookback_type}: can be 'floating_strike','fixed_strike'
@item @var{S}: stock price at time 0
@item @var{X1}: strike price (or S_min or S_max for fixed strike)
@item @var{X2}: payoff strike of fixed strike option
@item @var{T}: time to maturity in days 
@item @var{r}: annual risk-free interest rate (continuously compounded, act/365)
@item @var{sigma}: implied volatility of the stock price measured as annual 
standard deviation
@item @var{divrate}: dividend rate p.a., continously compounded
@end itemize
@seealso{option_binary, option_bs}
@end deftypefn

@node 	option_willowtree
@section 	option_willowtree
@cindex 	 Function 	option_willowtree
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {@var{value} =} option_willowtree (@var{CallPutFlag}, @var{AmericanFlag}, @var{S}, @var{X}, @var{T}, @var{r}, @var{sigma}, @var{dividend}, @var{dk})
@deftypefnx {Function File} {@var{value} =} option_willowtree (@var{CallPutFlag}, @var{AmericanFlag}, @var{S}, @var{X}, @var{T}, @var{r}, @var{sigma}, @var{dividend}, @var{dk}, @var{nodes}, @var{path_static})

Computes the price of european or american equity options according to the 
willow tree model.@*
The willow tree approach provides a fast and accurate way of calculating 
option prices. 
This implementation of the willow tree concept is based on following
literature:
@itemize @bullet
@item 'Willow Tree', Andy C.T. Ho, Master thesis, May 2000
@item 'Willow Power: Optimizing Derivative Pricing Trees', Michael Curran, 
ALGO RESEARCH QUARTERLY, Vol. 4, No. 4, December 2001
@end itemize

Example of an American Call Option with continuous dividends:@*
(365 days to maturity, vector with different spot prices and volatilities, 
strike = 8, r = 0.06, dividend = 0.05, timestep 5 days, 20 nodes):
@code{option_willowtree(1,1,[7;8;9;7;8;9],8,365,0.06,[0.2;0.2;0.2;0.3;0.3;0.3],0.05,5,20)}

Variables:
@itemize @bullet
@item @var{CallPutFlag}: Call: '1', Put: '0'
@item @var{AmericanFlag}: American option: '1', European Option: '0'
@item @var{S}: stock price at time 0
@item @var{X}: strike price 
@item @var{T}: time in days to maturity
@item @var{r}: annual risk-free interest rate (cont, act/365)
@item @var{sigma}: implied volatility of the stock price
@item @var{dividend}: continuous dividend yield, act/365
@item @var{dk}: size of timesteps for valuation points (default: 5 days)
@item @var{nodes}: number of nodes for willow tree setup. 
Number of nodes must be in list [10,15,20,30,40,50]. These vectors are 
optimized by Currans Method to fulfill variance constraint (default: 20)
@end itemize
@seealso{option_binomial, option_bs, option_exotic_mc}
@end deftypefn

@node 	perform_rf_stat_tests
@section 	perform_rf_stat_tests
@cindex 	 Function 	perform_rf_stat_tests
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} { [@var{retcode}] =} perform_rf_stat_tests(@var{riskfactor_cell},@var{riskfactor_struct},@var{RndMat},@var{distr_type})
Perform statistical tests on risk factor shock vector. Return 1 if all tests
pass, return 255 if at least one test fails.
@end deftypefn

@node 	pricing_forward
@section 	pricing_forward
@cindex 	 Function 	pricing_forward
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{theo_value} ] =} pricing_forward (@var{valuation_date}, @var{forward}, @var{discount_curve_object}, @var{underlying_object}, @var{und_curve_object})

Compute the theoretical value and price of FX, equity and bond forwards and 
futures.@*

Input and output variables:
@itemize @bullet
@item @var{valuation_date}: valuation date
@item @var{forward}: forward object
@item @var{discount_curve_object}: discount curve for forward
@item @var{underlying_object}: underlying object of forward
@item @var{und_curve_object}: discount curve object of underlying object
@end itemize
@seealso{timefactor, discount_factor, convert_curve_rates}
@end deftypefn

@node 	pricing_npv
@section 	pricing_npv
@cindex 	 Function 	pricing_npv
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{npv} @var{MacDur} @var{Convexity} @var{MonDur} @var{Convexity_alt}] =} pricing_npv(@var{valuation_date}, @var{cashflow_dates}, @var{cashflow_values}, @var{spread_constant}, @var{discount_nodes}, @var{discount_rates}, @var{basis}, @var{comp_type}, @var{comp_freq}, @var{interp_discount})

Compute the net present value, Macaulay Duration, Convexity and Monetary
duration of a given cash flow pattern according to a given discount curve 
and day count convention etc.@*
Pre-requirements:@*
@itemize @bullet
@item installed octave financial package
@item custom functions timefactor, discount_factor, interpolate_curve, 
and convert_curve_rates
@end itemize

Input and output variables:
@itemize @bullet
@item @var{valuation_date}:  Structure with relevant information for 
specification of the forward:@*
@item @var{cashflow_dates}:  cashflow_dates is a 1xN vector with all 
timesteps of the cash flow pattern
@item @var{cashflow_values}: cashflow_values is a MxN matrix with cash flow 
pattern.
@item @var{spread_constant}: a constant spread added to the total yield 
extracted from discount curve and spread curve (can be used to spread over yield)
@item @var{discount_nodes}:  tmp_nodes is a 1xN vector with all timesteps of 
the given curve
@item @var{discount_rates}:  tmp_rates is a MxN matrix with discount curve 
rates defined in columns. Each row contains a specific scenario with different 
curve structure
@item @var{basis}:   OPTIONAL: day-count convention of instrument (either 
basis number between 1 and 11, or specified as string (act/365 etc.)
@item @var{comp_type}:   OPTIONAL: compounding type of instrument 
(disc, cont, simple)
@item @var{comp_freq}:   OPTIONAL: compounding frequency of instrument 
(1,2,3,4,6,12 payments per year)
@item @var{comp_type_curve}: OPTIONAL: compounding type of curve 
@item @var{basis_curve}: OPTIONAL: day-count convention of curve 
@item @var{comp_freq_curve}: OPTIONAL: compounding frequency of curve 
@item @var{interp_discount}: OPTIONAL: interpolation method of discount curve 
@item @var{sensi_flag}: OPTIONAL: boolean variable (calculate sensitivities)
(default: linear)
@item @var{npv}: returns a Mx1 vector with all net present values per scenario
@item @var{MacDur}:  returns a Mx1 vector with all Macaulay durations
@item @var{Convexity}:  returns a Mx1 vector with all convexities
@item @var{MonDur}:  returns a Mx1 vector with all Monetary durations
@item @var{Convexity_alt}:  returns a Mx1 vector with Convexity (alternative 
method)
@end itemize
@seealso{timefactor, discount_factor, interpolate_curve, convert_curve_rates}
@end deftypefn

@node 	print_class2dot
@section 	print_class2dot
@cindex 	 Function 	print_class2dot
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex
 get all classes in folder and extract all Instrument classes

@node 	profiler_analysis
@section 	profiler_analysis
@cindex 	 Function 	profiler_analysis
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {} profiler_analysis(@var{script_name},@var{argument},@var{depth})
Call profiler for specified script and argument and return detailed statistics.
Input variables:
@itemize @bullet
@item @var{script_name}: name of script as string [required] 
@item @var{argument}: first and only argument of script [required] 
@item @var{depth}: number of sub-functions to analyse [optional, default = 10]
@end itemize
@end deftypefn

@node 	replacement_script
@section 	replacement_script
@cindex 	 Function 	replacement_script
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {} replacement_script(@var{replacement_list})
Matlab Adaption of Octarisk Code 
Input files phrases to replace: wordlist_matlab.csv 
Format:(String;Replacement String;File)
Input files for replacement: Automatical detection of all m.files in directory for replacement
Output data: Rewritten m.files
@seealso{adapt_matlab}
@end deftypefn

@node 	return_checked_input
@section 	return_checked_input
@cindex 	 Function 	return_checked_input
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{retval}] =} return_checked_input (@var{obj}, @var{val}, @var{prop}, @var{type})

Return value with validated input values according to value type date, char, 
numeric, and boolean or special treatment for scenario values. 
Used for storing correct field values for classes or structs.
The function itself is divided into two parts: special attributes with
taylormade validation checks are used for type 'special', while a 
generic approach according to differenct types are performed in the second
part.
@end deftypefn

@node 	rollout_structured_cashflows
@section 	rollout_structured_cashflows
@cindex 	 Function 	rollout_structured_cashflows
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{ret_dates} @var{ret_values} @var{accrued_interest}] =} rollout_structured_cashflows (@var{valuation_date}, @var{value_type}, @var{instrument}, @var{ref_curve}, @var{surface}, @var{riskfactor})

Compute the dates and values of cash flows (interest and principal and 
accrued interests and last coupon date for fixed rate bonds, 
floating rate notes, amortizing bonds, zero coupon bonds and 
structured products like caps and floors, CM Swaps, capitalized or averaging
CMS floaters or inflation linked bonds.@*
For FAB, ref_curve is used as prepayment curve, surface for PSA factors,
riskfactor for IR Curve shock extraction.
For Inflation Linked Bonds ref_curve is used as inflation expectation curve,
surface is used for Consumer Price Index.

@seealso{timefactor, discount_factor, get_forward_rate, interpolate_curve}
@end deftypefn

@node 	save_objects
@section 	save_objects
@cindex 	 Function 	save_objects
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{riskfactor_struct} @var{rf_failed_cell}] =} save_objects(@var{path_output}, @var{riskfactor_struct}, @var{instrument_struct}, @var{portfolio_struct}, @var{stresstest_struct})
Save provided structs for riskfactors, instruments, positions and stresstests.
@end deftypefn

@node 	scenario_generation_MC
@section 	scenario_generation_MC
@cindex 	 Function 	scenario_generation_MC
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{R} @var{distr_type} ] =} cenario_generation_MC (@var{corr_matrix}, @var{P}, @var{mc}, @var{copulatype}, @var{nu}, @var{time_horizon})

Compute correlated random numbers according to Gaussian or Student-t copulas and
arbitrary marginal distributions within the Pearson distribution system.@*

@seealso{get_marginal_distr_pearson, mvnrnd, normcdf, mvtrnd ,tcdf}
@end deftypefn

@node 	struct2obj
@section 	struct2obj
@cindex 	 Function 	struct2obj
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{obj}] =} struct2obj(@var{s},@var{verbose})
Converting structs into objects. Therefore the constructors of hard-coded 
classes are used to invoke objects and to set all structures attributes. 
The final object @var{obj} is returned. The optional @var{verbose} parameter 
sets the logging level.
@end deftypefn

@node 	swaption_bachelier
@section 	swaption_bachelier
@cindex 	 Function 	swaption_bachelier
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{SwaptionBachelierValue}] =} swaption_bachelier (@var{PayerReceiverFlag}, @var{F}, @var{X}, @var{T}, @var{r}, @var{sigma}, @var{m}, @var{tau})

Compute the price of european interest rate swaptions according to Bachelier Pricing Functions assuming normal-distributed volatilities.
Fast implementation, fully vectorized.@*
@example
@group
C = ((F-X)*N(d1) + sigma*sqrt(T)*n(d1))*exp(-rT) * multiplicator(m,tau)
P = ((X-F)*N(-d1) + sigma*sqrt(T)*n(d1))*exp(-rT) * multiplicator(m,tau)
d1 = (F-X)/(sigma*sqrt(T))
@end group
@end example
@*
Variables:
@itemize @bullet
@item @var{PayerReceiverFlag}: Call / Payer '1' (pay fixed) or Put / Receiver '0' (receive fixed, pay floating) swaption
@item @var{F}: forward rate of underlying interest rate (forward in T years for tau years)
@item @var{X}: strike rate 
@item @var{T}: time in days to maturity
@item @var{r}: annual risk-free interest rate (continuously compounded)
@item @var{sigma}: implied volatility of the interest rate measured as annual standard deviation
@item @var{m}: Number of Payments per year (m = 2 -> semi-annual) (continuous compounding is assumed)
@item @var{tau}: Tenor of underlying swap in Years 
@end itemize
@seealso{option_bs}
@end deftypefn

@node 	swaption_black76
@section 	swaption_black76
@cindex 	 Function 	swaption_black76
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{SwaptionB76Value}] =} swaption_black76 (@var{PayerReceiverFlag}, @var{F}, @var{X}, @var{T}, @var{r}, @var{sigma}, @var{m}, @var{tau})

Compute the price of european interest rate swaptions according to Black76 
pricing functions.
@example
@group
C = (F*N( d1) - X*N( d2))*exp(-rT) * multiplicator(m,tau)
P = (X*N(-d2) - F*N(-d1))*exp(-rT) * multiplicator(m,tau)
d1 = (log(S/X) + (r + 0.5*sigma^2)*T)/(sigma*sqrt(T))
d2 = d1 - sigma*sqrt(T)
@end group
@end example
@*
Variables:
@itemize @bullet
@item @var{PayerReceiverFlag}: Call / Payer '1' (pay fixed) or Put / Receiver
 '0' (receive fixed, pay floating) swaption
@item @var{F}: forward rate of underlying interest rate (
forward in T years for tau years)
@item @var{X}: strike rate 
@item @var{T}: time in days to maturity
@item @var{r}: annual risk-free interest rate (continuously compounded)
@item @var{sigma}: implied volatility of the interest rate measured as annual 
standard deviation
@item @var{m}: Number of Payments per year (m = 2 -> semi-annual) (continuous 
compounding is assumed)
@item @var{tau}: Tenor of underlying swap in Years 
@end itemize
@seealso{swaption_bachelier}
@end deftypefn

@node 	swaption_underlyings
@section 	swaption_underlyings
@cindex 	 Function 	swaption_underlyings
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{SwaptionValue}] =} swaption_underlyings (@var{PayerReceiverFlag}, @var{F}, @var{X}, @var{T}, @var{r}, @var{sigma}, @var{m}, @var{tau})

Compute the price of european interest rate swaptions according to Black76 
or Normal pricing functions using underlying fixed and floating legs.
@seealso{swaption_bachelier, swaption_black76}
@end deftypefn

@node 	test_io
@section 	test_io
@cindex 	 Function 	test_io
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{success_tests} @var{total_tests}] =} test_io(@var{path_testing_folder})
Perform integration tests for all functions which rely on input and output 
data. The functions have to be hard coded in this script and rely on validated
output data. The storage and parsing process of objects is a little bit tricky.
At first, all objects have to converted into structed and stored to a file.
After the structs from the file have been parsed, all structe have to
converted back again into objects using constructor and set methods.
See section B.2 for an example.
@end deftypefn

@node 	test_oct_files
@section 	test_oct_files
@cindex 	 Function 	test_oct_files
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex
 this is only a dummy function for containing all the oct file testing 
 suites.

@node 	timefactor
@section 	timefactor
@cindex 	 Function 	timefactor
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{tf} @var{dip} @var{dib}] =} timefactor(@var{d1}, @var{d2}, @var{basis})

Compute the time factor for a specific time period and day count basis.@*
Depending on day count basis, the time factor is evaluated as 
(days in period) / (days in year)

Input and output variables:
@itemize @bullet
@item @var{d1}: 			number of days until first date (scalar)
@item @var{d2}: 			number of days until second date (scalar)
@item @var{basis}: 		day-count basis (scalar or string)
@item @var{df}: 		OUTPUT: discount factor (scalar)
@item @var{dip}: 	OUTPUT: days in period (nominator of time factor) (scalar)
@item @var{dib}: 	OUTPUT: days in base (denominator of time factor) (scalar)
@end itemize
@seealso{discount_factor, yeardays, get_basis}
@end deftypefn

@node 	unittests
@section 	unittests
@cindex 	 Function 	unittests
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {} unittests()
Call unittests of specified functions and return test statistics.
@end deftypefn

@node 	unvech
@section 	unvech
@cindex 	 Function 	unvech
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {@var{m} =} unvech (@var{v}, @var{scale})
Performs the reverse of @code{vech} on the vector @var{v}.

Given a Nx1 array @var{v} describing the lower triangular part of a
matrix (as obtained from @code{vech}), it returns the full matrix.

The upper triangular part of the matrix will be multiplied by @var{scale} such
that 1 and -1 can be used for symmetric and antisymmetric matrix respectively.
@var{scale} must be a scalar and defaults to 1.

@seealso{vech, ind2sub, sub2ind_tril}
@end deftypefn

@node 	update_mktdata_objects
@section 	update_mktdata_objects
@cindex 	 Function 	update_mktdata_objects
@c Copyright (C) 2012-2016 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@deftypefn {Function File} {[@var{index_struct} @var{curve_struct} @var{id_failed_cell}] =} update_mktdata_objects(@var{mktdata_struct}, @var{index_struct}, @var{riskfactor_struct}, @var{curve_struct})
Update all market data objects with scenario dependent risk factor and curve shocks.
Return index struct and curve struct with scenario dependent absolute values. @*
Calculate reciprocal FX conversion factors for all exchange rate market objects (e.g. FX_USDEUR = 1 ./ FX_USDEUR).
During aggregation and instrument currency conversion the appropriate FX exchange rate is always chosen by FX_BasecurrencyForeigncurrency)
@end deftypefn

