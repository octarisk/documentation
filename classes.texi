@menu
* 	Instrument.help::
* 	Matrix.help::
* 	Curve.help::
* 	Forward.help::
* 	Option.help::
* 	Cash.help::
* 	Debt.help::
* 	Sensitivity.help::
* 	Riskfactor.help::
* 	Index.help::
* 	Synthetic.help::
* 	Surface.help::
* 	Swaption.help::
* 	Stochastic.help::
* 	CapFloor.help::
* 	Bond.help::
* 	Position.help::
* 	Retail.help::
@end menu 
@node 	Instrument.help
@section 	Instrument.help
@cindex 	 Function 	Instrument.help
@c Copyright (C) 2012-2018 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@c Make the apostrophe in code examples cut-and-paste friendly.
@codequoteundirected on
@deftypefn{Octarisk Class} { @var{object} =} Instrument (@var{name}, @var{id}, @var{description}, @var{type}, @var{currency}, @var{base_value}, @var{asset_class})

Superclass for all instrument objects.

@itemize @bullet
@item @var{name} (string): name of object
@item @var{id} (string): id of object
@item @var{description} (string): description of object
@item @var{type} (string): instrument type in list [cash, bond, debt, forward,
option, sensitivity, synthetic, capfloor, stochastic, swaption]
@item @var{currency} (string): ISO code of currency
@item @var{base_value} (float): actual base (spot) value of object
@item @var{asset_class} (sring): instrument asset class
@end itemize
@*
The constructor of the instrument class constructs an object with the 
following properties and inherits them to all sub classes: @*
@itemize @bullet
@item name: name of object
@item id: id of object
@item description: description of object
@item value_base: actual base (spot) value of object
@item currency: ISO code of currency
@item asset_class: instrument asset class
@item type: type of instrument class (Bond,Forward,...) 
@item value_stress: vector with values under stress scenarios
@item value_mc: matrix with values under MC scenarios (values per timestep
per column)
@item timestep_mc: MC timestep per column (cell string)
@end itemize

@end deftypefn
Dependencies of class:

 @image{Instrument,15cm}

@node 	Matrix.help
@section 	Matrix.help
@cindex 	 Function 	Matrix.help
@c Copyright (C) 2012-2018 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@c Make the apostrophe in code examples cut-and-paste friendly.
@codequoteundirected on
@deftypefn{Octarisk Class} {@var{object}} = Matrix(@var{id})
@deftypefnx{Octarisk Class} {@var{object}} = Matrix()

Class for setting up Matrix objects.

This class contains all attributes and methods related to the following Matrix types:

@itemize @bullet
@item Correlation: specifies a symmetric correlation matrix.
@end itemize

In the following, all methods and attributes are explained and a code example is given.

Methods for Matrix object @var{obj}:
@itemize @bullet
@item Matrix(@var{id}) or Matrix(): Constructor of a Matrix object. @var{id} is optional and specifies id and name of new object.

@item obj.set(@var{attribute},@var{value}): Setter method. Provide pairs of attributes and values. Values are checked for format and constraints.

@item obj.get(@var{attribute}): Getter method. Query the value of specified attribute.

@item obj.getValue(@var{xx},@var{yy}): Return matrix value for component on x-Axis @var{xx}
and component on y-Axis @var{yy}. Component values are recognized as strings.

@item Matrix.help(@var{format},@var{returnflag}): show this message. Format can be [plain text, html or texinfo].
If empty, defaults to plain text. Returnflag is boolean: True returns 
documentation string, false (default) returns empty string. [static method]
@end itemize

Attributes of Matrix objects:
@itemize @bullet
@item @var{id}: Matrix id. Has to be unique identifier. Default: empty string.
@item @var{name}: Matrix name. Default: empty string.
@item @var{description}: Matrix description. Default: empty string.
@item @var{type}: Matrix type. Can be [Correlation]

@item @var{components}: String cell specifying matrix components. For symmetric
correlation  matrizes x and y-axis components are equal.
@item @var{matrix}: Matrix containing all elements. Has to be of dimension n x n,
while n is length of @var{components} cell.
@item @var{components_xx}: Set automatically while setting @var{components} cell
@item @var{components_yy}: Set automatically while setting @var{components} cell
@end itemize


For illustration see the following example:
A symmetric 3 x 3 correlation matrix is specified and one specific correlation
for a set of components as well as the whole matrix is retrieved:
@example
@group

m = Matrix();
component_cell = cell;
component_cell(1) = 'INDEX_A';
component_cell(2) = 'INDEX_B';
component_cell(3) = 'INDEX_C';
m = m.set('id','BASKET_CORR','type','Correlation','components',component_cell);
m = m.set('matrix',[1.0,0.3,-0.2;0.3,1,0.1;-0.2,0.1,1]);
m.get('matrix')
corr_A_C = m.getValue('INDEX_A','INDEX_C')
@end group
@end example

@end deftypefn
Dependencies of class:

 @image{Matrix,15cm}

@node 	Curve.help
@section 	Curve.help
@cindex 	 Function 	Curve.help
@c Copyright (C) 2012-2018 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@c Make the apostrophe in code examples cut-and-paste friendly.
@codequoteundirected on
@deftypefn{Octarisk Class} {@var{object}} = Curve(@var{id})
@deftypefnx{Octarisk Class} {@var{object}} = Curve()

Class for setting up Curve objects.

This class contains all attributes and methods related to the following Curve types:

@itemize @bullet
@item Discount Curve: specify discount rates. Can be used as underlying for aggregated curves.
@item Spread Curve: specify spread rates. Can be used as underlying for aggregated curves.
@item Dummy Curve: used as default curve with no special meaning
@item Aggregated Curve: stacked curve which combines underlying curves by aggregation functions (e.g. sum, factor)
@item Prepayment Curve: specify prepayment rates per node (e.g. PSA curves).
@item Call Schedule: curve used for Bonds with embedded call options
@item Put Schedule: curve used for Bonds with embedded put options
@item Hazard Curve: curve used for CDS. Gives default probability per cf date
@item Historical Curve: curve with historical rates of index levels. Used for inflation linked or averaging instruments
@item Inflation Expectation Curve: specify inflation expectation rates used for inflation linked instrument pricing
@item Shock Curve: specify absolute or relative shocks per node, which can then be applied to other Curve types.
@end itemize


In the following, all methods and attributes are explained and a code example is given.

Methods for Curve object @var{obj}:
@itemize @bullet
@item Curve(@var{id}) or Curve(): Constructor of a Curve object. @var{id} is optional and specifies id and name of new object.

@item obj.set(@var{attribute},@var{value}): Setter method. Provide pairs of attributes and values. Values are checked for format and constraints.

@item obj.get(@var{attribute}): Getter method. Query the value of specified attribute.

@item obj.getRate(@var{scenario},@var{node}): Return scenario curve values at given node (in days).
Interpolation or Extrapolation is performed according to specified methods.
@var{scenario} can be 'base', 'stress' or a certain MC timestep like '250d'.

@item obj.getValue(@var{scenario}): Return all scenario curve values. @var{scenario}
can be 'base', 'stress' or a certain MC timestep like '250d'.

@item obj.apply_rf_shocks(@var{scenario},@var{riskfactor_object}): Set shock curve values for @var{scenario}
Scenario shocks from provided @var{riskfactor_object} are used

@item obj.isProp(@var{attribute}): Return true, if attribute is a property of Curve class. Return false otherwise.

@item Curve.help(@var{format},@var{returnflag}): show this message. Format can be [plain text, html or texinfo].
If empty, defaults to plain text. Returnflag is boolean: True returns 
documentation string, false (default) returns empty string. [static method]
@end itemize

Attributes of Curve objects:
@itemize @bullet
@item @var{id}: Curve id. Has to be unique identifier. Default: empty string.
@item @var{name}: Curve name. Default: empty string.
@item @var{description}: Curve description. Default: empty string.
@item @var{type}: Curve type. Can be [Discount Curve (default), Spread Curve, Dummy Curve,
Aggregated Curve, Prepayment Curve,
Call Schedule, Put Schedule,
Historical Curve, Inflation Expectation Curve, Shock Curve]

@item @var{day_count_convention}: Day count convention of curve. See 'help get_basis' 
for details. Default: 'act/365'\n@item @var{basis}: Basis belonging to day count convention. Value is set automatically.
@item @var{compounding_type}: Compounding type. Can be continuous, discrete or simple. 
Default: 'cont'
@item @var{compounding_freq}: Compounding frequency used for discrete compounding.
Can be [daily, weekly, monthly, quarterly, semi-annual, annual]. Default: 'annual'

@item @var{curve_function}: Type Aggregated Curve only: specifies how 
to aggregated curves, which are specified in attribute increments.
Can be [sum, product, divide, factor]. [sum, product, divide] specifies
mathematical operation applied on all curve increments.
[factor] allows only one increment and uses @var{curve_parameter} for multiplication. Default: 'sum'
@item @var{curve_parameter}: Type Aggregated Curve only: used as multiplication
parameter for factor @var{curve_function}.
@item @var{increments}: Type Aggregated Curve only: List of IDs of all
underlying curves. Use @var{curve_function} to specify how to aggregated curves.

@item @var{method_extrapolation}: Extrapolation method. Can be 'constant' (default) or 'linear'.
@item @var{method_interpolation}: Interpolation method. See 'help interpolate_curve' for details. Default: 'linear'.
@item @var{ufr}: Smith-Wilson Ultimate Forward Rate. Used for Smith-Wilson interpolation and extrapolation. Defaults to 0.042.
@item @var{alpha}: Smith-Wilson Reversion parameter. Used for Smith-Wilson interpolation and extrapolation. Defaults to 0.19.

@item @var{cap}: Cap rate. Cap rate is enforced on all set rates. Set to empty string for no cap rate. Default: empty string.
@item @var{floor}: Floor rate. Floor rate is enforced on all existing and future rates. Set to empty string for no floor rate. Default: empty string.

@item @var{nodes}: Vector with curve nodes.
@item @var{rates_base}: Vector with curve rates. Has to be of same column size as @var{nodes}.
@item @var{rates_mc}: Matrix with curve rates. Has to be of same column size as @var{nodes}.
Columns: nodes, Lines: scenarios. MC rates for several MC timesteps are stored in layers.
@item @var{rates_stress}: Matrix with curve rates. Has to be of same  as @var{nodes}.
Columns correspond to nodes, lines correspond to scenarios.
@item @var{timestep_mc}: String Cell array with MC timesteps. Automatically appended if values for new timesteps are set.

@item @var{shocktype_mc}: Specify how to apply risk factor shocks in Monte Carlo
scenarios and for method apply_rf_shocks. Can be [absolute, relative, sln_relative].
Automatically set by scripts. Default: absolute
@item @var{shocktype_stress}: Specify Stress risk factor shocks for method apply_rf_shocks.
Can be [absolute, relative]
by stree scenario configuration.
@item @var{sln_level}: Vector with term specific shift level for risk factors modelled with shifted log-normal model.
Automatically set by script during curve setup.
@item @var{american_flag}: Flag for American (true) or European (false) call feature on bonds. Valid only if Curve type is  call or put schedule. Default: false.
@end itemize


For illustration see the following example:
A discount curve c is specified. A shock curve s provides absolute shocks for stress
and relative shocks for MC scenarios, which are linearly interpolated and
subsequently applied to the discount curve c. In the end, stress and MC
discount rates are interpolated for given nodes with method getRate, while all curve rates are extracted
with getValue.
@example
@group

c = Curve();
c = c.set('id','Discount_Curve','type','Discount Curve', ...
'nodes',[365,3650,7300],'rates_base',[0.01,0.02,0.04], ...
'method_interpolation','linear','compounding_type','continuous', ...
'day_count_convention','act/365');
s = Curve();
s = s.set('id','IR Shock','type','Shock Curve','nodes',[365,7300], ...
'rates_base',[],'rates_stress',[0.01,0.01;0.02,0.02;-0.01,-0.01;-0.01,0.01], ...
'rates_mc',[1.1,1.1;0.9,0.9;1.2,0.8;0.8,1.2],'timestep_mc','250d', ...
'method_interpolation','linear','shocktype_stress','absolute', ...
'shocktype_mc','relative');
c = c.apply_rf_shock('stress',s);
c = c.apply_rf_shock('250d',s);
c_base = c.getRate('base',1825)
c_rate_stress = c.getRate('stress',1825)
c_rate_250d = c.getRate('250d',1825)
c_rates_250d = c.getValue('250d')
@end group
@end example

@end deftypefn
Dependencies of class:

 @image{Curve,15cm}

@node 	Forward.help
@section 	Forward.help
@cindex 	 Function 	Forward.help
@c Copyright (C) 2012-2018 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@c Make the apostrophe in code examples cut-and-paste friendly.
@codequoteundirected on
@deftypefn{Octarisk Class} {@var{object}} = Forward(@var{id})
@deftypefnx{Octarisk Class} {@var{object}} = Forward()

Class for setting up Forward and Future objects.
Possible underlyings are bonds, equities and FX rates. Therefore the following Forward types
are introduced:

@itemize @bullet
@item Bond: Forward on bond underlyings. Underlying instrument will be priced incl. accrued interest.
@item Equity: Forward on equity underlyings like stocks or equity funds. Only Continuous dividends are possible.
@item FX: Forward on currencies. Price is depending on underlying price and foreign and domestic discount factors.
@item EquityFuture: Standardized contract on equity underlyings. A net basis can be specified.
@item BondFuture: Standardized contract on Bond underlyings. A net basis can be specified.
@end itemize

In the following, all methods and attributes are explained and a code example is given.

Methods for Forward object @var{obj}:
@itemize @bullet
@item Forward(@var{id}) or Forward(): Constructor of a Forward object. @var{id} is optional and specifies id and name of new object.

@item obj.set(@var{attribute},@var{value}): Setter method. Provide pairs of attributes and values. Values are checked for format and constraints.

@item obj.get(@var{attribute}): Getter method. Query the value of specified attribute.

@item obj.calc_value(@var{valuation_date},@var{scenario}, @var{discount_curve_object}, @var{underlying_object}, @var{und_curve_object})
Calculate the value of Forwards based on valuation date, scenario type, discount curve and underlying instruments.
Underlying discount curve @var{und_curve_object} is used for Forwards on Bond or FX rates only.

@item obj.getValue(@var{scenario}): Return Forward value for given @var{scenario}.
Method inherited from Superclass @var{Instrument}

@item obj.calc_sensitivities(@var{valuation_date}, @var{discount_curve_object}, @var{underlying_object}, @var{und_curve_object})
Calculate sensitivities (the Greeks) of all Forward and Future by numeric approximation.

@item Forward.help(@var{format},@var{returnflag}): show this message. Format can be [plain text, html or texinfo].
If empty, defaults to plain text. Returnflag is boolean: True returns 
documentation string, false (default) returns empty string. [static method]
@end itemize

Attributes of Forward objects:
@itemize @bullet
@item @var{id}: Instrument id. Has to be unique identifier. (Default: empty string)
@item @var{name}: Instrument name. (Default: empty string)
@item @var{description}: Instrument description. (Default: empty string)
@item @var{value_base}: Base value of instrument of type real numeric. (Default: 0.0)
@item @var{currency}: Currency of instrument of type string. (Default: 'EUR')
During instrument valuation and aggregation, FX conversion takes place if corresponding FX rate is available.
@item @var{asset_class}: Asset class of instrument. (Default: 'derivative')
@item @var{type}: Type of instrument, specific for class. Set to 'Forward'.
@item @var{value_stress}: Line vector with instrument stress scenario values.
@item @var{value_mc}: Line vector with instrument scenario values.
MC values for several @var{timestep_mc} are stored in columns.
@item @var{timestep_mc}: String Cell array with MC timesteps. If new timesteps are set, values are automatically appended.

@item @var{issue_date}:  Issue date of Forward (date in format DD-MMM-YYYY)
@item @var{maturity_date}:  Maturity date of Forward (date in format DD-MMM-YYYY)
@item @var{day_count_convention}: Day count convention of curve. See 'help get_basis' 
for details (Default: 'act/365')
@item @var{compounding_type}: Compounding type. Can be continuous, discrete or simple. 
(Default: 'cont')
@item @var{compounding_freq}: Compounding frequency used for discrete compounding.
Can be [daily, weekly, monthly, quarterly, semi-annual, annual]. (Default: 'annual')
@item @var{strike_price}: Strike price (Default: 0.0)
@item @var{underlying_id}:ID of underlying object. (Default: '')
@item @var{underlying_price_base}:  Underlying base price. Used only
if underlying object is a risk factor. Risk factor shocks are applied to underlying base price. (Default: 0.0)
@item @var{underlying_sensitivity}:  Underlying sensitivity used only,
if underlying object is a risk factor. Risk factor shocks are scaled by this sensitivity (Default: 1.0)
@item @var{discount_curve}: Discount curve (Default: 'IR_EUR')
@item @var{foreign_curve}:  Foreign curve, used for Bond and FX Forwards only (Default: 'IR_USD')
@item @var{multiplier}: Multiplier. Used to scale price and value of one constract. (Default: 1)
@item @var{dividend_yield}:  Dividend yield is part of total cost of carry. Used for Equity Forwards only. (Default: 0.0)
@item @var{convenience_yield}:  Convenience yield is part of total cost of carry. Used for Equity Forwards only. (Default: 0.0)
@item @var{storage_cost}:  Storage cost (yield) is part of total cost of carry. Used for Equity Forwards only. (Default: 0.0)
@item @var{spread}:  Unsued: Spread of Forward (Default: 0.0) 
@item @var{cf_dates}: Unused: Cash flow dates (Default: [])
@item @var{cf_values}: Unused: Cash flow values (Default: [])
@item @var{component_weight}:  Used for Bond futures only. Scale future future price.
@item @var{net_basis}:  Net basis of futures. Used only, if @var{calc_price_from_netbasis} is set to true.
@item @var{calc_price_from_netbasis}: Boolean Flag. True: use @var{net_basis} to calculate future price. (Default: false).

@item @var{theo_delta}: Sensitivity to changes in underlying's price. Calculated by method @var{calc_sensitivities}.
@item @var{theo_gamma}: Sensitivity to changes in changes of underlying's price. Calculated by method @var{calc_sensitivities}.
@item @var{theo_vega}: Sensitivity to changes in volatility. Calculated by method @var{calc_sensitivities}.
@item @var{theo_theta}: Sensitivity to changes in remaining days to maturity. Calculated by method @var{calc_sensitivities}.
@item @var{theo_rho}: Sensitivity to changes in risk free rate. Calculated by method @var{calc_sensitivities}.
@item @var{theo_domestic_rho}: Sensitivity to changes in domestic interest rate. Calculated by method @var{calc_sensitivities}.
@item @var{theo_foreign_rho}: Sensitivity to changes in foreign interest rate. Calculated by method @var{calc_sensitivities}.
@item @var{theo_price}: Forward price. Calculated by method @var{calc_value}.
@end itemize


For illustration see the following example:
An equity forward with 10 years to maturity, an underlying index and a discount curve are set up
and the forward value (-27.2118960639903) is calculated and retrieved:
@example
@group

c = Curve();
c = c.set('id','IR_EUR','nodes',[365,3650,7300]);
c = c.set('rates_base',[0.0001002070,0.0045624391,0.009346842]);
c = c.set('method_interpolation','linear');
i = Index();
i = i.set('value_base',326.900);
f = Forward();
f = f.set('name','EQ_Forward_Index_Test','maturity_date','26-Mar-2036');
f = f.set('strike_price',426.900);
f = f.set('compounding_freq','annual');
f = f.calc_value('31-Mar-2016','base',c,i);
f.getValue('base')
@end group
@end example

@end deftypefn
Dependencies of class:

 @image{Forward,15cm}

@node 	Option.help
@section 	Option.help
@cindex 	 Function 	Option.help
@c Copyright (C) 2012-2018 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@c Make the apostrophe in code examples cut-and-paste friendly.
@codequoteundirected on
@deftypefn{Octarisk Class} {@var{object}} = Option(@var{id})
@deftypefnx{Octarisk Class} {@var{object}} = Option()

Class for setting up Option objects.
Possible underlyings are financial instruments or indizes. Therefore the following Option types
are introduced:

@itemize @bullet
@item OPT_EUR_C: European Call option priced by Black-Scholes model.
@item OPT_EUR_P: European Put option priced by Black-Scholes model.
@item OPT_AM_C: American Call option priced by Willow tree model, CRR binomial tree or Bjerksund-Stensland approximation.
@item OPT_AM_P: European Put option priced by Willow tree model, CRR binomial tree or Bjerksund-Stensland approximation.
@item OPT_BAR_C: European Barrier Call option. Can have all combinations of out or in and up or down barrier types. Priced with Merton, Reiner, Rubinstein model.
@item OPT_BAR_P: European Barrier Put option. Same restrictions as Barrier Call options.
@item OPT_ASN_C: European Asian Call option. Average rate only. The following compounding types can be used:
geometric continuous (Kemna-Vorst90 pricing model) or arithmetic continuous (Levy pricing model)
@item OPT_ASN_P: European Asian Put option. Same restrictions as Asian Call options.
@item OPT_BIN_C: European Binary Call option. Binary types gap, supershare, asset-or-nothing or cash-or-nothing. Priced with Reiner-Rubinstein model.
@item OPT_BIN_P: European Binary Put option. Same restrictions as Binary Call options.
@item OPT_LBK_C: European Lookback Call option. Lookback types floating_strike or fixed_strike.
Priced with Conze and Viswanathan or Goldman, Sosin and Gatto model.
@item OPT_LBP_P: European Lookback Put option. Same restrictions as Lookback Call options.
@end itemize

In the following, all methods and attributes are explained and a code example is given.

Methods for Option object @var{obj}:
@itemize @bullet
@item Option(@var{id}) or Option(): Constructor of a Option object. @var{id} is optional and specifies id and name of new object.

@item obj.set(@var{attribute},@var{value}): Setter method. Provide pairs of attributes and values. Values are checked for format and constraints.

@item obj.get(@var{attribute}): Getter method. Query the value of specified attribute.

@item obj.calc_value(@var{valuation_date},@var{scenario}, @var{underlying}, @var{discount_curve}, @var{volatility_surface}, @var{path_static})
Calculate the value of Options based on valuation date, scenario type, discount curve, underlying instrument and volatility surface.
The pricing model is chosen based on Option type and instrument model attributes.
A path to precalculated Willow trees for pricing American options by Willowtree model can be provided.

@item obj.calc_greeks(@var{valuation_date},@var{scenario}, @var{underlying}, @var{discount_curve}, @var{volatility_surface}, @var{path_static})
Calculate sensitivities (the Greeks) for the given Option instrument.
For plain-vanilla European Options the Greeks are calculated by Black-Scholes pricing.
The Greeks of all other Option types will be calculated by numeric approximation.

@item obj.calc_vola_spread(@var{valuation_date}, @var{underlying}, @var{discount_curve}, @var{volatility_surface}, @var{path_static})
Calibrate volatility spread in order to match the Option price with the market price. The volatility spread will be used for further pricing.

@item obj.getValue(@var{scenario}): Return Option value for given @var{scenario}.
Method inherited from Superclass @var{Instrument}

@item Option.help(@var{format},@var{returnflag}): show this message. Format can be [plain text, html or texinfo].
If empty, defaults to plain text. Returnflag is boolean: True returns 
documentation string, false (default) returns empty string. [static method]
@end itemize

Attributes of Option objects:
@itemize @bullet
@item @var{id}: Instrument id. Has to be unique identifier. (Default: empty string)
@item @var{name}: Instrument name. (Default: empty string)
@item @var{description}: Instrument description. (Default: empty string)
@item @var{value_base}: Base value of instrument of type real numeric. (Default: 0.0)
@item @var{currency}: Currency of instrument of type string. (Default: 'EUR')
During instrument valuation and aggregation, FX conversion takes place if corresponding FX rate is available.
@item @var{asset_class}: Asset class of instrument. (Default: 'derivative')
@item @var{type}: Type of instrument, specific for class. Set to 'Option'.
@item @var{value_stress}: Line vector with instrument stress scenario values.
@item @var{value_mc}: Line vector with instrument scenario values.
MC values for several @var{timestep_mc} are stored in columns.
@item @var{timestep_mc}: String Cell array with MC timesteps. If new timesteps are set, values are automatically appended.

@item @var{maturity_date}:  Maturity date of Option (date in format DD-MMM-YYYY)
@item @var{day_count_convention}: Day count convention of curve. See 'help get_basis' 
for details (Default: 'act/365')
@item @var{compounding_type}: Compounding type. Can be continuous, discrete or simple. 
(Default: 'cont')
@item @var{compounding_freq}: Compounding frequency used for discrete compounding.
Can be [daily, weekly, monthly, quarterly, semi-annual, annual]. (Default: 'annual')
@item @var{spread}: Interest rate spread used in calculating risk free interest rate. Default: 0.0;
@item @var{discount_curve}: ID of discount curve. Default: empty string
@item @var{underlying}: ID of underlying object (instrument or risk factor). Default: empty string
@item @var{vola_surface}: ID of volatility surface. Default: empty string
@item @var{vola_sensi}: Sensitivity scaling factor for volatility. Default: 1
@item @var{strike}: Strike value of Option (used to set maximum and minimum values for lookback options). Default: 100
@item @var{spot}: Spot value of underlying instrment. Only used, if underlying is risk factor.
@item @var{multiplier}: Multiplier of Option. Resulting Option price is scales by this multiplier. Default: 5
@item @var{div_yield}: Continuous dividend yield of underlying (act/365 day count convention assumed). Default: 0.0

@item @var{timesteps_size}: American Willow Tree timestep size (in days). Default: 5
@item @var{willowtree_nodes}: American Willow Tree nodes per timestep. Default: 20
@item @var{pricing_function_american}: American pricing model [Willowtree,BjSten]. Default: 'BjSten'

@item @var{binary_type}: Binary option type. Can be ['cash','gap','asset','supershare']. Defaults to 'cash'.
@item @var{lookback_type}: Lookback option type. Can be ['floating_strike','fixed_strike']. Defaults to 'floating_strike'.
@item @var{payoff_strike}: Binary Option payoff strike (used as e.g. upper bound or strike). Default: 100

@item @var{upordown}: Barrier Up or Down description. Default: 'U'
@item @var{outorin}: Barrier In or Out description. Default: 'out'
@item @var{barrierlevel}: Barrier level. Default: 0.0
@item @var{rebate}: Barrier rebate (payoff in case of a barrier event). Default: 0.0

@item @var{averaging_type} Asian option averaging type ['rate','strike']. Defaults to 'rate'.
@item @var{averaging_rule} = Asian option underlying distribution of average type ['geometric','arithmetic']. Defaults to 'geometric'
@item @var{averaging_monitoring} Asian option average monitoring. Can only be 'continuous'

@item @var{theo_delta}: Sensitivity to changes in underlying's price. Calculate by method @var{calc_greeks}.
@item @var{theo_gamma}: Sensitivity to changes in changes of underlying's price. Calculate by method @var{calc_greeks}.
@item @var{theo_vega}: Sensitivity to changes in volatility. Calculate by method @var{calc_greeks}.
@item @var{theo_theta}: Sensitivity to changes in remaining days to maturity. Calculate by method @var{calc_greeks}.
@item @var{theo_rho}: Sensitivity to changes in risk free rate. Calculate by method @var{calc_greeks}.
@item @var{theo_omega}: Specified as @var{theo_delta} scaled by underlying value over option base value. Calculate by method @var{calc_greeks}.
@end itemize


For illustration see the following example:
An American equity Option with 10 years to maturity, an underlying index, a volatility surface and a discount curve are set up
and the Option value (123.043), volatility spread and the Greeks are calculated by the Willowtree model and retrieved:
@example
@group

disp('Pricing American Option Object (Willowtree)')
c = Curve();
c = c.set('id','IR_EUR','nodes',[730,3650,4380], ...
'rates_base',[0.0001001034,0.0045624391,0.0062559362], ...
'method_interpolation','linear');
v = Surface();
v = v.set('axis_x',3650,'axis_x_name','TERM','axis_y',1.1, ...
'axis_y_name','MONEYNESS');
v = v.set('values_base',0.210360082233);
v = v.set('type','IndexVol');
i = Index();
i = i.set('value_base',286.867623322,'currency','USD');
o = Option();
o = o.set('maturity_date','29-Mar-2026','currency','USD', ...
'timesteps_size',5,'willowtree_nodes',30);
o = o.set('strike',368.7362,'multiplier',1,'sub_Type','OPT_AM_P');
o = o.set('pricing_function_american','Willowtree');
o = o.calc_value('31-Mar-2016','base',i,c,v);
o = o.calc_greeks('31-Mar-2016','base',i,c,v);
value_base = o.getValue('base')
theo_omega = o.get('theo_omega')
disp('Calibrating volatility spread over yield:')
o = o.set('value_base',100);
o = o.calc_vola_spread('31-Mar-2016',i,c,v);
o.getValue('base')
@end group
@end example

@end deftypefn
Dependencies of class:

 @image{Option,15cm}

@node 	Cash.help
@section 	Cash.help
@cindex 	 Function 	Cash.help
@c Copyright (C) 2012-2018 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@c Make the apostrophe in code examples cut-and-paste friendly.
@codequoteundirected on
@deftypefn{Octarisk Class} {@var{object}} = Cash(@var{id})
@deftypefnx{Octarisk Class} {@var{object}} = Cash()

Class for setting up Cash objects.

This class contains all attributes and methods related to the following Cash types:

@itemize @bullet
@item Cash: Specify riskless cash instruments
@end itemize

In the following, all methods and attributes are explained and a code example is given.

Methods for Cash object @var{obj}:
@itemize @bullet
@item Cash(@var{id}) or Cash(): Constructor of a Cash object. @var{id} is optional and specifies id and name of new object.

@item obj.set(@var{attribute},@var{value}): Setter method. Provide pairs of attributes and values. Values are checked for format and constraints.

@item obj.get(@var{attribute}): Getter method. Query the value of specified attribute.

@item obj.calc_value(@var{scenario},@var{scen_number}): Extends base value to vector of row size @var{scen_number}
and stores vector for given @var{scenario}. Cash instruments are per definition risk free.

@item obj.getValue(@var{scenario}): Return Cash value for given @var{scenario}.
Method inherited from Superclass @var{Instrument}

@item Cash.help(@var{format},@var{returnflag}): show this message. Format can be [plain text, html or texinfo].
If empty, defaults to plain text. Returnflag is boolean: True returns 
documentation string, false (default) returns empty string. [static method]
@end itemize

Attributes of Cash objects:
@itemize @bullet
@item @var{id}: Instrument id. Has to be unique identifier. Default: empty string.
@item @var{name}: Instrument name. Default: empty string.
@item @var{description}: Instrument description. Default: empty string.
@item @var{value_base}: Base value of instrument of type real numeric. Default: 0.0.
@item @var{currency}: Currency of instrument of type string. Default: 'EUR'
During instrument valuation and aggregation, FX conversion takes place if corresponding FX rate is available.
@item @var{asset_class}: Asset class of instrument. Default: 'unknown'
@item @var{type}: Type of instrument, specific for class. Set to 'cash'.
@item @var{value_stress}: Line vector with instrument stress scenario values.
@item @var{value_mc}: Line vector with instrument scenario values.
MC values for several @var{timestep_mc} are stored in columns.
@item @var{timestep_mc}: String Cell array with MC timesteps. If new timesteps are set, values are automatically appended.
@end itemize


For illustration see the following example:
A THB Cash instrument is being generated and during value calculation the stress and MC scenario values
with 20 resp. 1000 scenarios are derived from the base value:
@example
@group

c = Cash();
c = c.set('id','THB_CASH','name','Cash Position THB');
c = c.set('asset_class','cash','currency','THB');
c = c.set('value_base',346234.1256);
c = c.calc_value('stress',20);
c = c.calc_value('250d',1000);
value_stress = c.getValue('stress');
@end group
@end example

@end deftypefn
Dependencies of class:

 @image{Cash,15cm}

@node 	Debt.help
@section 	Debt.help
@cindex 	 Function 	Debt.help
@c Copyright (C) 2012-2018 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@c Make the apostrophe in code examples cut-and-paste friendly.
@codequoteundirected on
@deftypefn{Octarisk Class} {@var{object}} = Debt(@var{id})
@deftypefnx{Octarisk Class} {@var{object}} = Debt()

Class for setting up Debt objects. The idea of this class is to model baskets (funds) of bond instruments.
The shocked value is derived from a sensitivity approach based on Modified duration and
convexity. These sensitivities describe the total basket properties in terms of interest rate sensitivity.
The following formula is applied to calculate the instrument shock:
@example
@group
   dP
  --- = -D dY + 0.5 C dY^2
   P
@end group
@end example

If you want to model all underlying bonds directly, use Bond class for underlyings and Synthetic class for the basket (fund).

This class contains all attributes and methods related to the following Debt types:

@itemize @bullet
@item DBT: Standard debt type
@end itemize

In the following, all methods and attributes are explained and a code example is given.

Methods for Debt object @var{obj}:
@itemize @bullet
@item Debt(@var{id}) or Debt(): Constructor of a Debt object. @var{id} is optional and specifies id and name of new object.

@item obj.set(@var{attribute},@var{value}): Setter method. Provide pairs of attributes and values. Values are checked for format and constraints.

@item obj.get(@var{attribute}): Getter method. Query the value of specified attribute.

@item obj.calc_value(@var{discount_curve},@var{scenario}): Calculate instrument shocked value based on interest rate sensitivity.
Modified Duration and Convexity are used to predict change in value based on absolute shock discount curve at given term.

@item obj.getValue(@var{scenario}): Return Debt value for given @var{scenario}.
Method inherited from Superclass @var{Instrument}

@item Debt.help(@var{format},@var{returnflag}): show this message. Format can be [plain text, html or texinfo].
If empty, defaults to plain text. Returnflag is boolean: True returns 
documentation string, false (default) returns empty string. [static method]
@end itemize

Attributes of Debt objects:
@itemize @bullet
@item @var{id}: Instrument id. Has to be unique identifier. Default: empty string.
@item @var{name}: Instrument name. Default: empty string.
@item @var{description}: Instrument description. Default: empty string.
@item @var{value_base}: Base value of instrument of type real numeric. Default: 0.0.
@item @var{currency}: Currency of instrument of type string. Default: 'EUR'
During instrument valuation and aggregation, FX conversion takes place if corresponding FX rate is available.
@item @var{asset_class}: Asset class of instrument. Default: 'debt'
@item @var{type}: Type of instrument, specific for class. Set to 'debt'.
@item @var{value_stress}: Line vector with instrument stress scenario values.
@item @var{value_mc}: Line vector with instrument scenario values.
MC values for several @var{timestep_mc} are stored in columns.
@item @var{timestep_mc}: String Cell array with MC timesteps. If new timesteps are set, values are automatically appended.

@item @var{discount_curve}: Discount curve is used as sensitivity curve to derive absolute shocks at term given by duration.
@item @var{term}: Term of debt instrument (in years). Equals average maturity of all underlying cash flows.
@item @var{duration}: Modified duration of debt instrument.
@item @var{convexity}: Convexity of debt instrument.
@end itemize


For illustration see the following example:
Stress values of a debt instrument with average maturity of underlyings of 8.35 years and given duration and convexity
are calculated based on 100bp parallel down- and upshift scenarios of a given discount curve.
Stress results are [108.5300000000000;91.1969278203125]
@example
@group

c = Curve();
c = c.set('id','IR_EUR','nodes',[730,3650,4380],'rates_base',[0.01,0.02,0.025],'method_interpolation','linear');
c = c.set('rates_stress',[0.00,0.01,0.015;0.02,0.031,0.035],'method_interpolation','linear');
d = Debt();
d = d.set('duration',8.35,'convexity',18,'term',8.35);
d = d.calc_value(c,'stress');
d.getValue('base')
d.getValue('stress')
@end group
@end example

@end deftypefn
Dependencies of class:

 @image{Debt,15cm}

@node 	Sensitivity.help
@section 	Sensitivity.help
@cindex 	 Function 	Sensitivity.help
@c Copyright (C) 2012-2018 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@c Make the apostrophe in code examples cut-and-paste friendly.
@codequoteundirected on
@deftypefn{Octarisk Class} {@var{object}} = Sensitivity(@var{id})
@deftypefnx{Octarisk Class} {@var{object}} = Sensitivity()

Class for setting up Sensitivity objects. This class contains two different
instrument setups. The first idea of this class is to model an instrument
whose shocks are derived from underlying risk factor shocks or idiosyncratic risk (for MC only).
The shocks from these risk factors are then applied to the instrument base value under the
assumption of a Geometric Brownian Motion or Brownian Motion.
Basically, all real assets like Equity or Commodity can be modelled with this class.
The combined shock is a linear combination of all underlying risk factor shocks:
@example
@group
V_shock = V_base * exp(Sum_i=1...n [dRF_i * w_i]) (Model: GBM)
V_shock = V_base + (Sum_i=1...n [dRF_i * w_i]) (Model: BM)
@end group
@end example
with the new shock Value V_shock, base V_base, risk factor shock dRF_i and risk factor weight w_i.

The second idea is to use this class to specify a polynomial function or taylor series
of underlying instruments, risk factors, curves, surfaces or indizes and derive
the sensitivity value with the following formulas. If Taylor expansion shall be used:
@example
@group
V_shock = V_base + a1/b1 * x1^b1 + a2/b2 * x2^b2 + .. + an/bn * xn^bn * am/bm * xm^bm
@end group
@end example
The base value is used only if appropriate flag is set.
Otherwise, a polynomial function can be set up:
@example
@group
V_shock = V_base + a1 * x1^b1 + a2 * x2^b2 + .. + an * xn^bn * am * xm^bm
@end group
@end example
with the new shock Value V_shock, base V_base, and prefactors a, exponents b and
a multiplicative combination of cross terms (term with equal cross terms are
multiplied with each other, term with cross terms equal zero are added to the total value)
All combined cross terms and all single terms are finally summed up.

This class contains all attributes and methods related to the following Sensitivity types:

@itemize @bullet
@item EQU: Equity sensitivity type
@item RET: Real Estate sensitivity type
@item COM: Commodity sensitivity type
@item STK: Stock sensitivity type
@item ALT: Alternative investments sensitivity type
@item SENSI: Taylor series or polynomial equation of underlying objects
@end itemize

which stands for Equity, Real Estate, Commodity, Stock and Alternative Investments.
All sensitivity types assume a geometric brownian motion or brownian motion as underlying stochastic process.

In the following, all methods and attributes are explained and a code example is given.

Methods for Sensitivity object @var{obj}:
@itemize @bullet
@item Sensitivity(@var{id}) or Sensitivity(): Constructor of a Sensitivity object. @var{id} is optional and specifies id and name of new object.

@item obj.set(@var{attribute},@var{value}): Setter method. Provide pairs of attributes and values. Values are checked for format and constraints.

@item obj.get(@var{attribute}): Getter method. Query the value of specified attribute.

@item obj.calc_value(@var{valuation_date}, @var{scenario}, @var{riskfactor_struct}, @var{instrument_struct}, @var{index_struct}, @var{curve_struct}, @var{surface_struct}, [@var{scen_number}]):
Method for calculation of sensitivity value. Only structures with used objects need to be set.

@item obj.valuate(@var{valuation_date}, @var{scenario}, @var{instrument_struct}, @var{surface_struct}, @var{matrix_struct},
@var{curve_struct}, @var{index_struct}, @var{riskfactor_struct}, [ @var{para_struct} ])
Generic instrument valuation method. All objects required for valuation of the instrument
are taken from provided structures (e.g. curves, riskfactors, underlying indizes).
Method inherited from Superclass @var{Instrument}.

@item obj.getValue(@var{scenario}): Return Sensitivity value for given @var{scenario}.
Method inherited from Superclass @var{Instrument}

@item Sensitivity.help(@var{format},@var{returnflag}): show this message. Format can be [plain text, html or texinfo].
If empty, defaults to plain text. Returnflag is boolean: True returns 
documentation string, false (default) returns empty string. [static method]
@end itemize

Attributes of Sensitivity objects:
@itemize @bullet
@item @var{id}: Instrument id. Has to be unique identifier. Default: empty string.
@item @var{name}: Instrument name. Default: empty string.
@item @var{description}: Instrument description. Default: empty string.
@item @var{value_base}: Base value of instrument of type real numeric. Default: 0.0.
@item @var{currency}: Currency of instrument of type string. Default: 'EUR'
During instrument valuation and aggregation, FX conversion takes place if corresponding FX rate is available.
@item @var{asset_class}: Asset class of instrument. Default: empty string
@item @var{type}: Type of instrument, specific for class. Set to 'sensitivity'.
@item @var{value_stress}: Line vector with instrument stress scenario values.
@item @var{value_mc}: Line vector with instrument scenario values.
MC values for several @var{timestep_mc} are stored in columns.
@item @var{timestep_mc}: String Cell array with MC timesteps. If new timesteps are set, values are automatically appended.

@item @var{riskfactors}: Cell with IDs of all underlying risk factors. Default: empy cell.
@item @var{sensitivities}: Vector with weights of riskfactors of same length and order as riskfactors cell. Default: empty vector
@item @var{idio_vola}: Idiosyncratic volatility of sensitivity instrument. Used only if one riskfactor is set to 'IDIO'.
Applies a shock given by a normal distributed random variable with standard deviation taken from the value of attribute @var{idio_vola}
and a mean of zero.
@item @var{model}: Model specifies the stochastic process. Can be a Geometric Brownian
Notion (GBM) or Brownian Notion (BM). (Default: 'GBM')

@item @var{underlyings}: cell array of underlying indizes, curves, surfaces, instruments, risk factors
@item @var{x_coord}: vector with x coordinates of underlying (curves, surfaces, cubes only)
@item @var{y_coord}: vector y coordinate of underlying (surfaces, cubes only)
@item @var{z_coord}: vector z coordinate of underlying (cubes only)
@item @var{shock_type}: cell array of shock types for each underlying [value, relative, absolute]
@item @var{sensi_prefactor}: vector with prefactors (a in a*x^b)
@item @var{sensi_exponent}: vector with exponents (b in a*x^b)
@item @var{sensi_cross}: vector with cross terms [0 = single; 1,2,3, ... link cross terms]
@item @var{use_value_base}: boolean flag: use value_base for base valuation. Scenario shocks are added to base value (default: false)
@item @var{use_taylor_exp}: boolean flag: if true, treat polynomial value as Taylor expansion(default: false)

@item @var{cf_dates}: Unused: Cash flow dates (Default: [])
@item @var{cf_values}: Unused: Cash flow values (Default: [])
@end itemize


For illustration see the following example:
An All Country World Index (ACWI) fund with base value of 100 USD shall be modelled
with both instrument setups (Linear combination of risk factor shocks
and a polynomial (linear) function with two single terms.
Underlying risk factors are the MSCI Emerging Market and MSCI World Index.
The sensitivities to both risk factors
are equal to the weights of the subindices in the ACWI index. Both risk factors
are shocked during a stress scenario and the total shock values for the fund are calculated:

@example
@group
 fprintf('	doc_instrument:	Pricing Sensitivity Instrument (Polynomial Function)');
 r1 = Riskfactor();
  r1 = r1.set('id','MSCI_WORLD','scenario_stress',[20;-10], ...
        'model','GBM','shift_type',[1;1]);
  r2 = Riskfactor();
  r2 = r2.set('id','MSCI_EM','scenario_stress',[10;-20], ...
        'model','GBM','shift_type',[1;1] );
  riskfactor_struct = struct();
  riskfactor_struct(1).id = r1.id;
  riskfactor_struct(1).object = r1;
  riskfactor_struct(2).id = r2.id;
  riskfactor_struct(2).object = r2;
  s = Sensitivity();
  s = s.set('id','MSCI_ACWI_ETF','sub_type','SENSI', 'currency', 'USD' , ...
        'asset_class','Equity',  'value_base', 100, ...
        'underlyings',cellstr(['MSCI_WORLD';'MSCI_EM']), ...
        'x_coord',[0,0], ...
        'y_coord',[0,0.0], ...
        'z_coord',[0,0], ...
        'shock_type', cellstr(['absolute';'absolute']), ...
        'sensi_prefactor', [0.8,0.2], 'sensi_exponent', [1,1], ...
        'sensi_cross', [0,0], 'use_value_base',true,'use_taylor_exp',false);
  instrument_struct = struct();
  instrument_struct(1).id = s.id;
  instrument_struct(1).object = s;
s = s.calc_value('31-Dec-2016', 'base',riskfactor_struct,instrument_struct,[],[],[],2);
s.getValue('base')
s = s.calc_value('31-Dec-2016', 'stress',riskfactor_struct,instrument_struct,[],[],[],2);
s.getValue('stress')

 fprintf('	doc_instrument:	Pricing Sensitivity Instrument (Riskfactor linear combination)');
 r1 = Riskfactor();
  r1 = r1.set('id','MSCI_WORLD','scenario_stress',[20;-10], ...
        'model','BM','shift_type',[1;1]);
  r2 = Riskfactor();
  r2 = r2.set('id','MSCI_EM','scenario_stress',[10;-20], ...
        'model','BM','shift_type',[1;1] );
  riskfactor_struct = struct();
  riskfactor_struct(1).id = r1.id;
  riskfactor_struct(1).object = r1;
  riskfactor_struct(2).id = r2.id;
  riskfactor_struct(2).object = r2;
  s = Sensitivity();
  s = s.set('id','MSCI_ACWI_ETF','sub_type','EQU', 'currency', 'USD', ...
        'asset_class','Equity', 'model', 'BM', ...
        'riskfactors',cellstr(['MSCI_WORLD';'MSCI_EM']), ...
        'sensitivities',[0.8,0.2],'value_base',100.00);
  instrument_struct = struct();
  instrument_struct(1).id = s.id;
  instrument_struct(1).object = s;
  s = s.valuate('31-Dec-2016', 'stress', ...
        instrument_struct, [], [], ...
        [], [], riskfactor_struct);
  s.getValue('stress')
@end group
@end example

Stress results are [118;88].

@end deftypefn
Dependencies of class:

 @image{Sensitivity,15cm}

@node 	Riskfactor.help
@section 	Riskfactor.help
@cindex 	 Function 	Riskfactor.help
@c Copyright (C) 2012-2018 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@c Make the apostrophe in code examples cut-and-paste friendly.
@codequoteundirected on
@deftypefn{Octarisk Class} {@var{object}} = Riskfactor(@var{id})
@deftypefnx{Octarisk Class} {@var{object}} = Riskfactor()

Class for setting up Riskfactor objects.

The mapping between e.g. curve or index objects and their corresponding risk factors
is automatically done by using regular expressions to match the names.
Riskfactors always have to begin with 'RF_' followed by the object name.
If certain nodes of curves or surfaces are shocked, the name is followed by an additional node identifier,
e.g. 'RF_IR_EUR_SWAP_1Y' for shocking an interest rate curve or 'RF_VOLA_IR_EUR_1825_3650'
for shocking a certain point on the volatility tenor / term surface.

Riskfactors can be either shocked during stresses, where custom absolute or relative shocks can be defined.
During Monte-Carlo scenario generation risk factor shocks are calculated by applying statistical processes
according to specified stochastic model. The random numbers follow a match of given
mean, standard deviation, skewness and kurtosis according to distributions selected by
the Pearson Type I-VII distribution system.

This class contains all attributes and methods related to the following Riskfactor types:

@itemize @bullet
@item RF_IR: Interest rate risk factor.
@item RF_SPREAD: Spread risk factor.
@item RF_COM: Commodity risk factor.
@item RF_RE: Real estate risk factor.
@item RF_EQ: Equity risk factor.
@item RF_VOLA: Volatility risk factor.
@item RF_ALT: Alternative investment risk factor.
@item RF_INFL: Inflation risk factor.
@item RF_FX: Forex risk factor.
@end itemize

In the following, all methods and attributes are explained and a code example is given.

Methods for Riskfactor object @var{obj}:
@itemize @bullet
@item Riskfactor(@var{id}) or Riskfactor(): Constructor of a Riskfactor object. @var{id} is optional and specifies id and name of new object.

@item obj.set(@var{attribute},@var{value}): Setter method. Provide pairs of attributes and values. Values are checked for format and constraints.

@item obj.get(@var{attribute}): Getter method. Query the value of specified attribute.

@item obj.getValue(@var{scenario}, @var{abs_flag}, @var{sensitivity}): Return Riskfactor value
according to scenario type. If optional parameter abs_flag is true returns Riskfactor scenario values.
Therefore static method Riskfactor.get_abs_values will be called.

@item Riskfactor.help(@var{format},@var{returnflag}): show this message. Format can be [plain text, html or texinfo].
If empty, defaults to plain text. Returnflag is boolean: True returns 
documentation string, false (default) returns empty string. [static method]
@item Riskfactor.get_abs_values(@var{model}, @var{scen_deltavec}, @var{value_base}, @var{sensitivity}): Calculate absolute
scenario value for given base value, sensitivity, model and shock.  [static method]
@item Riskfactor.get_basis(@var{dcc_string}): Return basis integer value for given day count convention string.
@end itemize

Attributes of Riskfactor objects:
@itemize @bullet
@item @var{id}: Riskfactor id. Has to be unique identifier. Default: empty string.
@item @var{name}: Riskfactor name. Default: empty string.
@item @var{description}: Riskfactor description. Default: empty string.
@item @var{type}: Riskfactor type. Can be [RF_IR, RF_SPREAD, RF_COM, RF_RE, RF_EQ, RF_VOLA, RF_ALT, RF_INFL or RF_FX]

@item @var{model}: Stochastic risk factor model. Can be [Geometric Brownian Motion (GBM), Brownian Motioan (BM),
Black-Karasinsky Model (BKM), Shifted LogNormal (SLN), Ornstein-Uhlenbeck (OU), Square-Root Diffusion (SRD)]. Default: empty string.
@item @var{mean}: Annualized targeted marginal mean (drift) of risk factor. Default: 0.0
@item @var{std}: Annualized targeted marginal standard deviation of risk factor. Default: 0.0
@item @var{skew}: Targeted marginal skewness of risk factor. Default: 0.0
@item @var{kurt}: Targeted marginal kurtosis of risk factor. Default: 0.0
@item @var{value_base}:  Base value of risk factor (required for mean reverting stochastic models). Default: 0.0
@item @var{mr_level}: Mean reversion level. Default: 0.0
@item @var{mr_rate}: Mean reversion parameter. Default: 0.0
@item @var{node}:  Risk factor term value in first dimension (in days). For curves equals term in days at x-axis (term). Default: 0.0
@item @var{node2}:  Risk factor term value in second dimension. For interest rate surfaces equals term in days at y-axis (tenor or term).
For index surfaces equals moneyness. Default: 0.0
@item @var{node3}:  Risk factor term value in third dimension. For volatility cubes equals moneyness at z-axis. Default: 0.0
@item @var{sln_level}: Shift parameter (shift level) of shifted log-normal distribution. Default: 0.0

@item @var{scenario_mc}: Vector with risk factor shock values. 
MC rates for several MC timesteps are stored in layers.
@item @var{scenario_stress}: Vector with risk factor shock values. 
@item @var{timestep_mc}: String Cell array with MC timesteps. Automatically appended if values for new timesteps are set.

@item @var{shocktype_mc}: Specify how to apply risk factor shocks in Monte Carlo
scenarios. Can be [absolute, relative, sln_relative].
Automatically set by scripts. Default: absolute
@item @var{shift_type}: Specify a vector specifying stress risk factor shift type .
Can be either 0 (absolute) or 1 (relative) shift.
@end itemize


For illustration see the following example:
A swap risk factor modelled by a shifted log-normal model at the three year node
is set up and shifted in three stress scenarios (absolute up- and downshift, relative downshift):
@example
@group

disp('Setting up Swap(3650) risk factor')
r = Riskfactor();
r = r.set('id','RF_EUR-SWAP_3Y','name','RF_EUR-SWAP_3Y', ...
    'scenario_stress',[0.02;-0.01;0.8], ...
    'type','RF_IR','model','SLN','shift_type',[0;0;1], ...
    'mean',0.0,'std',0.117,'skew',0.0,'kurt',3, ...
    'node',1095,'sln_level',0.03)
@end group
@end example

@end deftypefn
Dependencies of class:

 @image{Riskfactor,15cm}

@node 	Index.help
@section 	Index.help
@cindex 	 Function 	Index.help
@c Copyright (C) 2012-2018 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@c Make the apostrophe in code examples cut-and-paste friendly.
@codequoteundirected on
@deftypefn{Octarisk Class} {@var{object}} = Index(@var{id})
@deftypefnx{Octarisk Class} {@var{object}} = Index()

Class for setting up Index objects.

Index class is used for specifying asset indizes, exchange rates and consumer price
indizes. Indizes serve as underlyings for e.g. Options or Forwards, are used
to set up forex rates or CPI indizes for inflation linked products.
Indizes can be shocked with risk factors (e.g. risk factor types RF_EQ or RF_FX)
or in MC scenarios.

This class contains all attributes and methods related to the following Index types:

@itemize @bullet
@item EQUITY INDEX
@item BOND INDEX
@item VOLATILITY INDEX
@item COMMODITY INDEX
@item REAL ESTATE INDEX
@item EXCHANGE RATE
@item CPI (Consumer Price index)
@item AGGREGATED INDEX (consists of underlying indexes)
@end itemize

In the following, all methods and attributes are explained and a code example is given.

Methods for Index object @var{obj}:
@itemize @bullet
@item Index(@var{id}) or Index(): Constructor of a Index object. @var{id} is optional and specifies id and name of new object.

@item obj.set(@var{attribute},@var{value}): Setter method. Provide pairs of attributes and values. Values are checked for format and constraints.

@item obj.get(@var{attribute}): Getter method. Query the value of specified attribute.

@item obj.getValue(@var{scenario}): Return Index value according to scenario type.

@item Index.help(@var{format},@var{returnflag}): show this message. Format can be [plain text, html or texinfo].
If empty, defaults to plain text. Returnflag is boolean: True returns 
documentation string, false (default) returns empty string. [static method]

@item Index.get_basis(@var{dcc_string}): Return basis integer value for 
given day count convention string. [static method]
@end itemize

Attributes of Index objects:
@itemize @bullet
@item @var{id}: Index id. Has to be unique identifier. Default: empty string.
@item @var{name}: Index name. Default: empty string.
@item @var{description}: Index description. Default: empty string.
@item @var{type}: Index type. Can be [EQUITY INDEX, BOND INDEX, VOLATILITY INDEX,
COMMODITY INDEX, REAL ESTATE INDEX, EXCHANGE RATE, CPI]. Default: empty string.
@item @var{value_base}:  Base value of index. Default: 1.0
@item @var{currency}: Index currency. Default: 'EUR'

@item @var{index_function}: Type Aggregated Index only: specifies how 
to aggregated indexes, which are specified in attribute increments.
Can be [sum, product, divide, factor]. [sum, product, divide] specifies
mathematical operation applied on all curve increments.
[factor] allows only one increment and uses @var{curve_parameter} for multiplication. Default: 'sum'
@item @var{index_parameter}: Type Aggregated indexes only: used as multiplication
parameter for factor @var{curve_function}.
@item @var{increments}: Type Aggregated indexes only: List of IDs of all
underlying indexes. Use @var{index_function} to specify how to aggregated indexes.

@item @var{scenario_mc}: Vector with Monte Carlo index values. 
\n@item @var{scenario_stress}: Vector with Stress index values. 
@item @var{timestep_mc}: String Cell array with MC timesteps. Automatically appended if values for new timesteps are set.
@item @var{shift_type}: (unused) Specify a vector specifying stress index shift type .
Can be either 0 (absolute) or 1 (relative) shift.
@end itemize


For illustration see the following example:
@example
@group

disp('Setting up an equity index and Exchange Rate')
i = Index();
i = i.set('id','MSCIWORLD','value_base',1000, ...
    'scenario_stress',[2000;1333;800],'currency','USD');
fx = Index();
fx = fx.set('id','FX_EURUSD','value_base',1.1,  ...
    'scenario_stress',[1.2;1.18;1.23]);
@end group
@end example

@end deftypefn
Dependencies of class:

 @image{Index,15cm}

@node 	Synthetic.help
@section 	Synthetic.help
@cindex 	 Function 	Synthetic.help
@c Copyright (C) 2012-2018 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@c Make the apostrophe in code examples cut-and-paste friendly.
@codequoteundirected on
@deftypefn{Octarisk Class} {@var{object}} = Synthetic(@var{id})
@deftypefnx{Octarisk Class} {@var{object}} = Synthetic()

Class for setting up Synthetic objects.
A Synthetic instrument is a linear combination of underlying instruments. The following Synthetic types
are introduced:

@itemize @bullet
@item SYNTH: Synthetic instrument with underlyings. The Synthetic price
is based on the linear combination of underlying instrument's prices.
@item Basket: The same as type SYNTH, but additional attributes for specifying
underlying volatility surface and volatility types are introduced to enable basket option valuation.
@end itemize

In the following, all methods and attributes are explained and a code example is given.

Methods for Synthetic object @var{obj}:
@itemize @bullet
@item Synthetic(@var{id}) or Synthetic(): Constructor of a Synthetic object. @var{id} is optional and specifies id and name of new object.

@item obj.set(@var{attribute},@var{value}): Setter method. Provide pairs of attributes and values. Values are checked for format and constraints.

@item obj.get(@var{attribute}): Getter method. Query the value of specified attribute.

@item obj.calc_value(@var{valuation_date},@var{scenario}, @var{instrument_struct}, @var{index_struct})
Calculate the value of Synthetic instruments based on valuation date, scenario type, underlying instruments and FX rates.
The provided structures have to contain the referenced underlying instrument objects and FX rates.

@item obj.getValue(@var{scenario}): Return Synthetic value for given @var{scenario}.
Method inherited from Superclass @var{Instrument}

@item Synthetic.help(@var{format},@var{returnflag}): show this message. Format can be [plain text, html or texinfo].
If empty, defaults to plain text. Returnflag is boolean: True returns 
documentation string, false (default) returns empty string. [static method]
@end itemize

Attributes of Synthetic objects:
@itemize @bullet
@item @var{id}: Instrument id. Has to be unique identifier. (Default: empty string)
@item @var{name}: Instrument name. (Default: empty string)
@item @var{description}: Instrument description. (Default: empty string)
@item @var{value_base}: Base value of instrument of type real numeric. (Default: 0.0)
@item @var{currency}: Currency of instrument of type string. (Default: 'EUR')
During instrument valuation and aggregation, FX conversion takes place if corresponding FX rate is available.
@item @var{asset_class}: Asset class of instrument. (Default: 'derivative')
@item @var{type}: Type of instrument, specific for class. Set to 'Synthetic'.
@item @var{value_stress}: Line vector with instrument stress scenario values.
@item @var{value_mc}: Line vector with instrument scenario values.
MC values for several @var{timestep_mc} are stored in columns.
@item @var{timestep_mc}: String Cell array with MC timesteps. If new timesteps are set, values are automatically appended.

@item @var{day_count_convention}: Day count convention of curve. See 'help get_basis' 
for details (Default: 'act/365')
@item @var{compounding_type}: Compounding type. Can be continuous, discrete or simple. 
(Default: 'cont')
@item @var{compounding_freq}: Compounding frequency used for discrete compounding.
Can be [daily, weekly, monthly, quarterly, semi-annual, annual]. (Default: 'annual')
@item @var{instruments}: Underlying instrument identifiers (Cellstring )
@item @var{weights}: Underlying instruments weights (Numeric vector)
@item @var{discount_curve}: Discount curve (Default: empty string)
@item @var{instr_vol_surfaces}: Required for Options on Baskets only:
Underlying instruments volatility surface identifiers (Cellstring )
@item @var{correlation_matrix}: Required for Options on Baskets only:
Correlation matrix object of Basket underlyings (Default: empty string)
@item @var{basket_vola_type}: Required for Options on Baskets only:
Approximation method for basket volatility calculation  [Levy, VCV, Beisser] (Default: 'Levy')
@end itemize


For illustration see the following example:
A fund modelled as synthetic instrument with two underlying indizes (MSCI World and Euro Stoxx 50) is set up
and the synthetic value (1909.090909) is calculated and retrieved:
@example
@group

fprintf('Pricing Synthetic Instrument');
s = Synthetic();
instrument_cell = cell;
instrument_cell(1) = 'EURO_STOXX_50';
instrument_cell(2) = 'MSCIWORLD';
s = s.set('id','TestSynthetic','instruments',instrument_cell);
s = s.set('weights',[1,1],'currency','EUR');
i1 = Index();
i1 = i1.set('id','EURO_STOXX_50','value_base',1000,'scenario_stress',2000);
i2 = Index();
i2 = i2.set('id','MSCIWORLD','value_base',1000);
i2 = i2.set('scenario_stress',2000,'currency','USD');
fx = Index();
fx = fx.set('id','FX_EURUSD','value_base',1.1,'scenario_stress',1.2);
instrument_struct = struct();
instrument_struct(1).id = i1.id;
instrument_struct(1).object = i1;
instrument_struct(2).id = i2.id;
instrument_struct(2).object = i2;
index_struct = struct();
index_struct(1).id = fx.id;
index_struct(1).object = fx;
valuation_date = datenum('31-Mar-2016');
s = s.calc_value(valuation_date,'base',instrument_struct,index_struct);
s.getValue('base')
@end group
@end example
@end deftypefn
Dependencies of class:

 @image{Synthetic,15cm}

@node 	Surface.help
@section 	Surface.help
@cindex 	 Function 	Surface.help
@c Copyright (C) 2012-2018 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@c Make the apostrophe in code examples cut-and-paste friendly.
@codequoteundirected on
@deftypefn{Octarisk Class} {@var{object}} = Surface(@var{id})
@deftypefnx{Octarisk Class} {@var{object}} = Surface()

Class for setting up Surface objects.

Surface class is used for specifying IndexVol, IRVol, Stochastic, Prepayment or Dummy Surfaces.
A Surface (or Cube) stores two- or three-dimensional values (e.g. term, tenor and/or
moneyness dependent volatility values.
Surfaces can be shocked with risk factors (e.g. risk factor types RF_VOLA_EQ or RF_VOLA_IR)
at any coordinates of the multi-dimensional space in MC or stress scenarios.

This class contains all attributes and methods related to the following Surface types:

@itemize @bullet
@item @var{IndexVol} two-dimensional surface (term vs. moneyness) for setting up Equity volatility values.
@item @var{IRVol} two- or three-dimensional surface (term vs. moneyness) / cube (term vs. tenor vs. moneyness)
for setting up Interest rate volatility values.
@item @var{Stochastic} one- or two-dimensional curve / surface to store scenario dependent values
(e.g. stochastic cash flow surface with values dependent on date and quantile)
@item @var{Prepayment} two-dimensional prepayment surface with prepayment factors dependent
on e.g. interest rate shock and coupon rates.
@item @var{Dummy} Dummy curve for various purposes.
@end itemize

In the following, all methods and attributes are explained and a code example is given.

Methods for Surface object @var{obj}:
@itemize @bullet
@item Surface(@var{id}) or Surface(): Constructor of a Surface object. @var{id} is optional and specifies id and name of new object.

@item obj.set(@var{attribute},@var{value}): Setter method. Provide pairs of attributes and values. Values are checked for format and constraints.

@item obj.get(@var{attribute}): Getter method. Query the value of specified attribute.

@item obj.getValue(@var{scenario}, @var{x}, @var{y}, @var{z}): Return Surface value at given coordinates according to scenario type.
Interpolate surface base value and risk factor shock (only possible after call of method @var{apply_rf_shocks} )

@item Surface.help(@var{format},@var{returnflag}): show this message. Format can be [plain text, html or texinfo].
If empty, defaults to plain text. Returnflag is boolean: True returns 
documentation string, false (default) returns empty string. [static method]

@item obj.apply_rf_shocks(@var{riskfactor_struct}): Apply risk factor shocks to Surface base values and store
the shocks for later use in attribute @var{shock_struct}. These shocks are then applied to the surface base value with method getValue.
The risk factors are taken from the provided structure according to the surface risk factor IDs given by the attribute @var{riskfactors}.

@item Surface.interpolate(@var{x}, [@var{y}, [@var{z}]]): Return Surface base value at given coordinates.
@end itemize

Attributes of Surface objects:
@itemize @bullet
@item @var{id}: Surface id. Has to be unique identifier. Default: empty string.
@item @var{name}: Surface name. Default: empty string.
@item @var{description}: Surface description. Default: empty string.
@item @var{type}: Surface type. Can be [Index, IR, Stochastic, Prepayment, Dummy Surfaces]. Default: Index.
@item @var{day_count_convention}: Day count convention of curve. See 'help get_basis' 
for details (Default: 'act/365')
@item @var{compounding_type}: Compounding type. Can be continuous, discrete or simple. 
(Default: 'cont')
@item @var{method_interpolation}: Interpolation method. Can be linear or nearest. Default: linear.
@item @var{compounding_freq}: Compounding frequency used for discrete compounding.
Can be [daily, weekly, monthly, quarterly, semi-annual, annual]. (Default: 'annual')
@item @var{values_base}:  Base values of Surface.
@item @var{moneyness_type}:  Moneyness type. Can be K/S for relative moneyness
or K-S for absolute moneyness. (Default: 'K/S').
@item @var{shock_struct}: Structure containing all risk factor shock specifications
(e.g. model, risk factor coordinates, shock values and shift type)
@item @var{riskfactors}: Cell specifying all risk factor IDs
@item @var{axis_x}: x-axis coordinates
@item @var{axis_y}: y-axis coordinates
@item @var{axis_z}: z-axis coordinates
@item @var{axis_x_name}: x-axis name
@item @var{axis_y_name}: y-axis name
@item @var{axis_z_name}: z-axis name

@end itemize


For illustration see the following example:
@example
@group

disp('Setting up an Index Surface and Risk factor, apply shocks and retrieve values:')
r1 = Riskfactor();
r1 = r1.set('id','V1','scenario_stress',[1.0;-0.5], ...
'model','GBM','shift_type',[1;1], ...
'node',730,'node2',1);
riskfactor_struct(1).id = r1.id;
riskfactor_struct(1).object = r1;
v = Surface();
v = v.set('id','V1','axis_x',[365,3650], ...
'axis_x_name','TERM','axis_y',[0.9,1.0,1.1], ...
'axis_y_name','MONEYNESS');
v = v.set('values_base',[0.25,0.36;0.22,0.32;0.26,0.34]);
riskfactor_cell = cell;
riskfactor_cell(1) = 'V1';
v = v.set('type','INDEX','riskfactors',riskfactor_cell);
v = v.apply_rf_shocks(riskfactor_struct);
base_value = v.interpolate(365,0.9)
base_value = v.getValue('base',365,0.9)
stress_value = v.getValue('stress',365,0.9)
@end group
@end example

@end deftypefn
Dependencies of class:

 @image{Surface,15cm}

@node 	Swaption.help
@section 	Swaption.help
@cindex 	 Function 	Swaption.help
@c Copyright (C) 2012-2018 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@c Make the apostrophe in code examples cut-and-paste friendly.
@codequoteundirected on
@deftypefn{Octarisk Class} {@var{object}} = Swaption(@var{id})
@deftypefnx{Octarisk Class} {@var{object}} = Swaption()

Class for setting up Swaption objects.
Possible underlyings are fixed and floating swap legs. Therefore the following Swaption types
are introduced:

@itemize @bullet
@item SWAPT_REC: European Receiver Swaption priced by Black-Scholes or Bachelier normal model.
@item SWAPT_PAY: European Payer Swaption priced by Black-Scholes or Bachelier normal model.
@end itemize

In the following, all methods and attributes are explained and a code example is given.

Methods for Swaption object @var{obj}:
@itemize @bullet
@item Swaption(@var{id}) or Swaption(): Constructor of a Swaption object. @var{id} is optional and specifies id and name of new object.

@item obj.set(@var{attribute},@var{value}): Setter method. Provide pairs of attributes and values. Values are checked for format and constraints.

@item obj.get(@var{attribute}): Getter method. Query the value of specified attribute.

@item obj.calc_value(@var{valuation_date},@var{scenario}, @var{discount_curve}, @var{volatility_surface}, @var{underlying_fixed_leg}, @var{underlying_floating_leg})
Calculate the value of Swaptions based on valuation date, scenario type, discount curve, underlying instruments and volatility surface.
The pricing model is chosen based on Swaption type and instrument model attributes.

@item obj.calc_greeks(@var{valuation_date},@var{scenario}, @var{discount_curve}, @var{volatility_surface}, @var{underlying_fixed_leg}, @var{underlying_floating_leg})
Calculate numerical sensitivities (the Greeks) for the given Swaption instrument.

@item obj.calc_vola_spread(@var{valuation_date},@var{scenario}, @var{discount_curve}, @var{volatility_surface}, @var{underlying_fixed_leg}, @var{underlying_floating_leg})
Calibrate volatility spread in order to match the Swaption price with the market price. The volatility spread will be used for further pricing.

@item obj.getValue(@var{scenario}): Return Swaption value for given @var{scenario}.
Method inherited from Superclass @var{Instrument}

@item Swaption.help(@var{format},@var{returnflag}): show this message. Format can be [plain text, html or texinfo].
If empty, defaults to plain text. Returnflag is boolean: True returns 
documentation string, false (default) returns empty string. [static method]
@end itemize

Attributes of Swaption objects:
@itemize @bullet
@item @var{id}: Instrument id. Has to be unique identifier. (Default: empty string)
@item @var{name}: Instrument name. (Default: empty string)
@item @var{description}: Instrument description. (Default: empty string)
@item @var{value_base}: Base value of instrument of type real numeric. (Default: 0.0)
@item @var{currency}: Currency of instrument of type string. (Default: 'EUR')
During instrument valuation and aggregation, FX conversion takes place if corresponding FX rate is available.
@item @var{asset_class}: Asset class of instrument. (Default: 'derivative')
@item @var{type}: Type of instrument, specific for class. Set to 'Swaption'.
@item @var{value_stress}: Line vector with instrument stress scenario values.
@item @var{value_mc}: Line vector with instrument scenario values.
MC values for several @var{timestep_mc} are stored in columns.
@item @var{timestep_mc}: String Cell array with MC timesteps. If new timesteps are set, values are automatically appended.

@item @var{maturity_date}:  Maturity date of Swaption (date in format DD-MMM-YYYY)
@item @var{effective_date}:  Effective date of Swaption (date in format DD-MMM-YYYY)
@item @var{day_count_convention}: Day count convention of curve. See 'help get_basis'
for details (Default: 'act/365')
@item @var{compounding_type}: Compounding type. Can be continuous, discrete or simple. 
(Default: 'cont')
@item @var{compounding_freq}: Compounding frequency used for discrete compounding.
Can be [daily, weekly, monthly, quarterly, semi-annual, annual]. (Default: 'annual')
@item @var{spread}: Interest rate spread used in calculating risk free interest rate. Default: 0.0;
@item @var{discount_curve}: ID of discount curve. Default: empty string
@item @var{underlying}: ID of underlying curve object for extracting forward rates. Default: empty string
@item @var{vola_surface}: ID of volatility surface. Default: empty string
@item @var{vola_sensi}: Sensitivity scaling factor for volatility. Default: 1
@item @var{strike}: Strike rate of Swaption. Default: 100
@item @var{spot}: Spot rate of underlying reference curve. Only used, if underlying is risk factor.
@item @var{multiplier}: Multiplier of Swaption. Resulting Swaption price is scales by this multiplier. Default: 100
@item @var{model}: Pricing model for Swaptions. Can be ['black','normal']. Default: 'black'

@item @var{tenor}: Tenor of swaption contract.
@item @var{no_payments}: Number of payments of swaption contract.
@item @var{use_underlyings}: Boolean flag: if true, underlying swap values of
fixed and floating legs are used for calculation of swaption spot price spot price (Default: 'false')
@item @var{und_fixed_leg}: ID of underlying fixed swap leg. Object has to be a Bond(). Default: empty string
@item @var{und_floating_leg}: ID of underlying floating swap leg. Object has to be a Bond(). Default: empty string

@item @var{theo_delta}: Sensitivity to changes in underlying's price. Calculate by method @var{calc_greeks}.
@item @var{theo_gamma}: Sensitivity to changes in changes of underlying's price. Calculate by method @var{calc_greeks}.
@item @var{theo_vega}: Sensitivity to changes in volatility. Calculate by method @var{calc_greeks}.
@item @var{theo_theta}: Sensitivity to changes in remaining days to maturity. Calculate by method @var{calc_greeks}.
@item @var{theo_rho}: Sensitivity to changes in risk free rate. Calculate by method @var{calc_greeks}.
@item @var{theo_omega}: Specified as @var{theo_delta} scaled by underlying value over Swaption base value. Calculate by method @var{calc_greeks}.
@end itemize


For illustration see the following example:
A normal payer swaption with maturity in 20 years with underlying swaps starting
in 20 years for 10 years, a volatility surface and a discount curve are priced.
The resulting Swaption value (642.6867193851) is retrieved:
@example
@group

disp('Pricing Payer Swaption with underlyings (Normal Model)')
r = Curve();
r = r.set('id','EUR-SWAP-NOFLOOR','nodes', ...
[7300,7665,8030,8395,8760,9125,9490,9855,10220,10585,10900], ...
'rates_base',[0.02,0.01,0.0075,0.005,0.0025,-0.001, ...
-0.002,-0.003,-0.005,-0.0075,-0.01], ...
'method_interpolation','linear');
fix = Bond();
fix = fix.set('Name','SWAP_FIXED','coupon_rate',0.045, ...
'value_base',100,'coupon_generation_method','forward', ...
'sub_type','SWAP_FIXED');
fix = fix.set('maturity_date','24-Mar-2046','notional',100, ...
'compounding_type','simple','issue_date','26-Mar-2036', ...
'term',365,'notional_at_end',0);
fix = fix.rollout('base','31-Mar-2016');
fix = fix.rollout('stress','31-Mar-2016');
fix = fix.calc_value('31-Mar-2016','base',r); 
fix = fix.calc_value('31-Mar-2016','stress',r);
float = Bond();
float = float.set('Name','SWAP_FLOAT','coupon_rate',0.00,'value_base',100, ...
'coupon_generation_method','forward','last_reset_rate',-0.000, ...
'sub_type','SWAP_FLOATING','spread',0.00);
float = float.set('maturity_date','24-Mar-2046','notional',100, ...
'compounding_type','simple','issue_date','26-Mar-2036', ...
'term',365,'notional_at_end',0);
float = float.rollout('base',r,'31-Mar-2016');
float = float.rollout('stress',r,'31-Mar-2016');
float = float.calc_value('30-Sep-2016','base',r);
float = float.calc_value('30-Sep-2016','stress',r);
v = Surface();
v = v.set('axis_x',30,'axis_x_name','TENOR', ...
'axis_y',45,'axis_y_name','TERM','axis_z',1.0,'axis_z_name','MONEYNESS');
v = v.set('values_base',0.376563388);
v = v.set('type','IRVol');
s = Swaption();
s = s.set('maturity_date','26-Mar-2036','effective_date','31-Mar-2016');
s = s.set('strike',0.045,'multiplier',1,'sub_type', 'SWAPT_PAY', ...
'model','normal','tenor',10);
s = s.set('und_fixed_leg','SWAP_FIXED','und_floating_leg','SWAP_FLOAT', ...
'use_underlyings',true);
s = s.calc_value('31-Mar-2016','base',r,v,fix,float);
s.getValue('base')
@end group
@end example

@end deftypefn
Dependencies of class:

 @image{Swaption,15cm}

@node 	Stochastic.help
@section 	Stochastic.help
@cindex 	 Function 	Stochastic.help
@c Copyright (C) 2012-2018 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@c Make the apostrophe in code examples cut-and-paste friendly.
@codequoteundirected on
@deftypefn{Octarisk Class} {@var{object}} = Stochastic(@var{id})
@deftypefnx{Octarisk Class} {@var{object}} = Stochastic()

Class for setting up Stochastic objects.
A Stochastic instrument uses a risk factor with random variables 
(either uniform, normal or t-distributed) to draw values from a 1D Surface.
The surface has exactly one value per given quantile [0,1].
This instrument type can be used to pre-calculate values in another risk 
system for a given risk factor distribution.

@itemize @bullet
@item STOCHASTIC: Stochastic instrument type is the default value.
@end itemize

In the following, all methods and attributes are explained and a code example is given.

Methods for Stochastic object @var{obj}:
@itemize @bullet
@item Stochastic(@var{id}) or Stochastic(): Constructor of a Stochastic object. @var{id} is optional and specifies id and name of new object.

@item obj.set(@var{attribute},@var{value}): Setter method. Provide pairs of attributes and values. Values are checked for format and constraints.

@item obj.get(@var{attribute}): Getter method. Query the value of specified attribute.

@item obj.calc_value(@var{valuation_date},@var{scenario}, @var{riskfactor}, @var{surface})
Calculate the value of Stochastic instruments. Quantile values from a 1-dimensional surface are drawn
based on (transformed) risk factor shocks.

@item obj.getValue(@var{scenario}): Return Stochastic value for given @var{scenario}.
Method inherited from Superclass @var{Instrument}

@item Stochastic.help(@var{format},@var{returnflag}): show this message. Format can be [plain text, html or texinfo].
If empty, defaults to plain text. Returnflag is boolean: True returns 
documentation string, false (default) returns empty string. [static method]
@end itemize

Attributes of Stochastic objects:
@itemize @bullet
@item @var{id}: Instrument id. Has to be unique identifier. (Default: empty string)
@item @var{name}: Instrument name. (Default: empty string)
@item @var{description}: Instrument description. (Default: empty string)
@item @var{value_base}: Base value of instrument of type real numeric. (Default: 0.0)
@item @var{currency}: Currency of instrument of type string. (Default: 'EUR')
During instrument valuation and aggregation, FX conversion takes place if corresponding FX rate is available.
@item @var{asset_class}: Asset class of instrument. (Default: 'stochastic')
@item @var{type}: Type of instrument, specific for class. Set to 'Stochastic'.
@item @var{value_stress}: Line vector with instrument stress scenario values.
@item @var{value_mc}: Line vector with instrument scenario values.
MC values for several @var{timestep_mc} are stored in columns.
@item @var{timestep_mc}: String Cell array with MC timesteps. If new timesteps are set, values are automatically appended.

@item @var{quantile_base}: Base quantile of stochastic curve. (Default: 0.5)
@item @var{stochastic_riskfactor}: underlying risk factor objects. Shocks are transformed according to @var{stochastic_rf_type}
@item @var{stochastic_curve}: underlying 1-dim surface with values per quantile.
@item @var{stochastic_rf_type}: Risk factor transformation. Type can be ['normal','t','uniform'] (Default: 'normal')
@item @var{t_degree_freedom}:  degrees of freedom for t distribution (Default: 120)
@end itemize


For illustration see the following example:
A stochastic value object is generated. Quantile values are given by
a 1-dim volatility surface.
The resulting Stress value ([95;100;105]) is retrieved:
@example
@group

disp('Pricing Pricing Stochastic Value Object')
r = Riskfactor();
r = r.set('value_base',0.5,'scenario_stress',[0.3;0.50;0.7],'model','BM');
value_x = 0;
value_quantile = [0.1,0.5,0.9];
value_matrix = [90;100;110];
v = Surface();
v = v.set('axis_x',value_x,'axis_x_name','DATE', ...
'axis_y',value_quantile,'axis_y_name','QUANTILE');
v = v.set('values_base',value_matrix);
v = v.set('type','STOCHASTIC');
s = Stochastic();
s = s.set('sub_type','STOCHASTIC','stochastic_rf_type','uniform', ...
't_degree_freedom',10);
s = s.calc_value('31-Mar-2016','base',r,v);
s = s.calc_value('31-Mar-2016','stress',r,v);
stress_value = s.getValue('stress')
@end group
@end example

@end deftypefn
Dependencies of class:

 @image{Stochastic,15cm}

@node 	CapFloor.help
@section 	CapFloor.help
@cindex 	 Function 	CapFloor.help
@c Copyright (C) 2012-2018 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@c Make the apostrophe in code examples cut-and-paste friendly.
@codequoteundirected on
@deftypefn{Octarisk Class} {@var{object}} = CapFloor(@var{id})
@deftypefnx{Octarisk Class} {@var{object}} = CapFloor()

Class for setting up CapFloor objects.
Plain vanilla caps and floors (consisting of caplet and floorlets) can be based
on interest rates or inflation rates. Cash flows are generated according to
different models (Black, Normal, Analytic) and subsequently discounted to calculate
the CapFloor value.

@itemize @bullet
@item CAP: Plain Vanilla interest rate cap. Valuation model either ['black','normal','analytic']
@item FLOOR: Plain Vanilla interest rate floor. Valuation model either ['black','normal','analytic']
@item CAP_CMS: CMS interest rate cap. Valuation model either ['black','normal','analytic']
@item FLOOR_CMS: CMS interest rate floor. Valuation model either ['black','normal','analytic']
@item CAP_INFL: Cap on inflation expectation rates (derived from inflation index values).
Analytical model only (cash flow value based on difference of inflation rate and strike rate)
@item FLOOR_INFL: Floor on inflation rates (derived from inflation index values).
Analytical model only (cash flow value based on difference of inflation rate and strike rate)
@end itemize

In the following, all methods and attributes are explained and a code example is given.

Methods for CapFloor object @var{obj}:
@itemize @bullet
@item CapFloor(@var{id}) or CapFloor(): Constructor of a CapFloor object. @var{id} is optional and specifies id and name of new object.

@item obj.set(@var{attribute},@var{value}): Setter method. Provide pairs of attributes and values. Values are checked for format and constraints.

@item obj.get(@var{attribute}): Getter method. Query the value of specified attribute.

@item obj.calc_value(@var{valuation_date},@var{scenario}, @var{discount_curve}):
Calculate the net present value of cash flows of Caps and Floors.

@item obj.rollout(@var{valuation_date},@var{scenario}, @var{reference_curve}, @var{vola_surface}): used for (CMS) Caps and Floors
@item obj.rollout(@var{valuation_date},@var{scenario}, @var{inflation_exp_rates}, @var{historical_inflation}, @var{consumer_price_index}): used for Inflation Caps and Floors
Cash flow rollout for (Inflation) Caps and Floors.

@item obj.calc_sensitivity(@var{valuation_date},@var{scenario},  @var{reference_curve}, @var{vola_surface}, @var{discount_curve})
Calculate numerical sensitivities (durations, vega, theta) for the given CapFloor instrument.

@item obj.calc_vola_spread(@var{valuation_date},@var{scenario}, @var{discount_curve}, @var{volatility_surface})
Calibrate volatility spread in order to match the CapFloor price with the market price. The volatility spread will be used for further pricing.

@item obj.getValue(@var{scenario}): Return CapFloor value for given @var{scenario}.
Method inherited from Superclass @var{Instrument}

@item CapFloor.help(@var{format},@var{returnflag}): show this message. Format can be [plain text, html or texinfo].
If empty, defaults to plain text. Returnflag is boolean: True returns 
documentation string, false (default) returns empty string. [static method]
@end itemize

Attributes of CapFloor objects:
@itemize @bullet
@item @var{id}: Instrument id. Has to be unique identifier. (Default: empty string)
@item @var{name}: Instrument name. (Default: empty string)
@item @var{description}: Instrument description. (Default: empty string)
@item @var{value_base}: Base value of instrument of type real numeric. (Default: 0.0)
@item @var{currency}: Currency of instrument of type string. (Default: 'EUR')
During instrument valuation and aggregation, FX conversion takes place if corresponding FX rate is available.
@item @var{asset_class}: Asset class of instrument. (Default: 'derivative')
@item @var{type}: Type of instrument, specific for class. Set to 'CapFloor'.
@item @var{value_stress}: Line vector with instrument stress scenario values.
@item @var{value_mc}: Line vector with instrument scenario values.
MC values for several @var{timestep_mc} are stored in columns.
@item @var{timestep_mc}: String Cell array with MC timesteps. If new timesteps are set, values are automatically appended.

@item @var{model}: Valuation model for (CMS) Caps and Floors can be either ['black','normal','analytic'].
Inflation Caps and Floors are valuated by analytical model only.
@end itemize


For illustration see the following example:
A 2 year Cap starting in 3 years is priced with Black model.
The resulting Cap value (137.0063959386) and volatility spread (-0.0256826614604929)is retrieved:
@example
@group

disp('Pricing Cap Object with Black Model')
cap = CapFloor();
cap = cap.set('id','TEST_CAP','name','TEST_CAP','issue_date','30-Dec-2018', ...
'maturity_date','29-Dec-2020','compounding_type','simple');
cap = cap.set('term',365,'term_unit','days','notional',10000, ...
'coupon_generation_method','forward','notional_at_start',0, ...
'notional_at_end',0);
cap = cap.set('strike',0.005,'model','Black','last_reset_rate',0.0, ...
'day_count_convention','act/365','sub_type','CAP');
c = Curve();
c = c.set('id','IR_EUR','nodes',[30,1095,1460],'rates_base',[0.01,0.01,0.01], ...
'method_interpolation','linear');
v = Surface();
v = v.set('axis_x',365,'axis_x_name','TENOR','axis_y',90, ...
'axis_y_name','TERM','axis_z',1.0,'axis_z_name','MONEYNESS');
v = v.set('values_base',0.8);
v = v.set('type','IRVol');
cap = cap.rollout('31-Dec-2015','base',c,v);
cap = cap.calc_value('31-Dec-2015','base',c);
base_value = cap.getValue('base')
cap = cap.set('value_base',135.000);
cap = cap.calc_vola_spread('31-Dec-2015',c,v);
cap = cap.rollout('31-Dec-2015','base',c,v);
cap = cap.calc_value('31-Dec-2015','base',c);
vola_spread = cap.vola_spread
@end group
@end example

@end deftypefn
Dependencies of class:

 @image{CapFloor,15cm}

@node 	Bond.help
@section 	Bond.help
@cindex 	 Function 	Bond.help
@c Copyright (C) 2012-2018 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@c Make the apostrophe in code examples cut-and-paste friendly.
@codequoteundirected on
@deftypefn{Octarisk Class} {@var{object}} = Bond(@var{id})
@deftypefnx{Octarisk Class} {@var{object}} = Bond()

Class for setting up various Bond objects.
Cash flows are generated specific for each Bond sub type and subsequently
discounted to calculate the Bond value. All bonds can have embedded options
(Option pricing according to Hull-White model).

@itemize @bullet
@item FRB: Fixed Rate Bond
@item FRN: Floating Rate Note: Calculate CF Values based on forward rates of a given reference curve.
@item ZCB: Zero Coupon Bond
@item ILB: Inflation Linked Bond
@item CDS: Credit Default Swaps
@item CASHFLOW: Cash flow instruments. Custom cash flow dates and values are discounted.
@item SWAP_FIXED: Swap fixed leg
@item SWAP_FLOATING: Swap floating leg
@item FRN_CMS_SPECIAL: Special type floating rate notes (capitalized, average, min, max) based on CMS rates
@item CMS_FLOATING: Floating leg based on CMS rates
@item FRA: Forward Rate Agreement
@item FVA: Forward Volatility Agreement
@item FRN_FWD_SPECIAL:  Averaging FRN: Average forward or historical rates of cms_sliding period
@item STOCHASTICCF: Stochastic cash flow instrument (cash flows values are derived from an empirical cash flow distribution)
@end itemize

In the following, all methods and attributes are explained and a code example is given.

Methods for Bond object @var{obj}:
@itemize @bullet
@item Bond(@var{id}) or Bond(): Constructor of a Bond object. @var{id} is optional and specifies id and name of new object.

@item obj.set(@var{attribute},@var{value}): Setter method. Provide pairs of attributes and values. Values are checked for format and constraints.

@item obj.get(@var{attribute}): Getter method. Query the value of specified attribute.

@item obj.calc_value(@var{valuation_date},@var{scenario}, @var{discount_curve})
@item obj.calc_value(@var{valuation_date},@var{scenario}, @var{discount_curve}, @var{call_schedule}, @var{put_schedule}):
Calculate the net present value of cash flows of Bonds (including pricing of embedded options)

@item obj.rollout(@var{scenario}, @var{valuation_date}): used for FRB and CASHFLOW  instruments
@item obj.rollout(@var{scenario}, @var{valuation_date}, @var{reference_curve}, @var{vola_surface}): used for CMS_FLOATING or FRN_SPECIAL
@item obj.rollout(@var{scenario}, @var{reference_curve}, @var{valuation_date}, @var{vola_surface}): used for FRN, FRA, FVA, SWAP_FLOATING
@item obj.rollout(@var{scenario},@var{valuation_date}, @var{psa_curve}, @var{psa_factor_surface}, @var{ir_shock_curve}): used for FAB with prepayments
@item obj.rollout(@var{scenario},@var{valuation_date}, @var{inflation_expectation_curve}, @var{historical_rates}, @var{consumer_price_index}): used for ILB
@item obj.rollout(@var{scenario},@var{valuation_date}, @var{riskfactor}, @var{cashflow_surface}): used for Stochastic CF instruments
@item obj.rollout(@var{scenario},@var{valuation_date}, @var{hazard_curve}, @var{reference_asset},@var{reference_curve}): used for CDS
Cash flow rollout for Bonds

@item obj.calc_sensitivities(@var{valuation_date},@var{discount_curve}, @var{reference_curve})
Calculate analytical and numerical sensitivities for the given Bond instrument.

@item obj.calc_key_rates(@var{valuation_date},@var{discount_curve})
Calculate key rate sensitivities for the given Bond instrument.

@item obj.calc_spread_over_yield(@var{valuation_date},@var{scenario}, @var{discount_curve}) or
@item obj.calc_spread_over_yield(@var{valuation_date},@var{scenario}, @var{discount_curve}, @var{call_schedule}, @var{put_schedule})
Calibrate spread over yield in order to match the Bond price with the market price. The interest rate spread will be used for further pricing.

@item obj.calc_yield_to_mat(@var{valuation_date}): Calculate yield to maturity for given cash flow structure.

@item obj.getValue(@var{scenario}): Return Bond value for given @var{scenario}.
Method inherited from Superclass @var{Instrument}

@item Bond.help(@var{format},@var{returnflag}): show this message. Format can be [plain text, html or texinfo].
If empty, defaults to plain text. Returnflag is boolean: True returns 
documentation string, false (default) returns empty string. [static method]
@end itemize

Attributes of Bond objects:
@itemize @bullet
@item @var{id}: Instrument id. Has to be unique identifier. (Default: empty string)
@item @var{name}: Instrument name. (Default: empty string)
@item @var{description}: Instrument description. (Default: empty string)
@item @var{value_base}: Base value of instrument of type real numeric. (Default: 0.0)
@item @var{currency}: Currency of instrument of type string. (Default: 'EUR')
During instrument valuation and aggregation, FX conversion takes place if corresponding FX rate is available.
@item @var{asset_class}: Asset class of instrument. (Default: 'derivative')
@item @var{type}: Type of instrument, specific for class. Set to 'Bond'.
@item @var{value_stress}: Line vector with instrument stress scenario values.
@item @var{value_mc}: Line vector with instrument scenario values.
MC values for several @var{timestep_mc} are stored in columns.
@item @var{timestep_mc}: String Cell array with MC timesteps. If new timesteps are set, values are automatically appended.
@end itemize

For illustration see the following example:
A 9 month floating rate note instrument will be calibrated and priced.
The resulting spread over yield value (0.00398785481397732),
base value (99.7917725092950) and effective duration (3.93109370316470e-005)is retrieved:
@example
@group

disp('Pricing Floating Rate Bond Object and calculating sensitivities')
b = Bond();
b = b.set('Name','Test_FRN','coupon_rate',0.00,'value_base',99.7527, ...
'coupon_generation_method','backward','compounding_type','simple');
b = b.set('maturity_date','30-Mar-2017','notional',100, ...
'compounding_type','simple','issue_date','21-Apr-2011');
b = b.set('term',3,'term_unit','months','last_reset_rate',-0.0024,'sub_Type','FRN','spread',0.003);
r = Curve();
r = r.set('id','REF_IR_EUR','nodes',[30,91,365,730], ...
'rates_base',[0.0001002740,0.0001002740,0.0001001390,0.0001000690], ...
'method_interpolation','linear');
b = b.rollout('base',r,'30-Jun-2016');
c = Curve();
c = c.set('id','IR_EUR','nodes',[30,90,180,365,730], ...
'rates_base',[0.0019002740,0.0019002740,0.0019002301,0.0019001390,0.001900069], ...
'method_interpolation','linear');
b = b.set('clean_value_base',99.7527,'spread',0.003);
b = b.calc_spread_over_yield('30-Jun-2016',c);
b.get('soy')
b = b.calc_value('30-Jun-2016','base',c);
b.getValue('base')
b = b.calc_sensitivities('30-Jun-2016',c,r);
b.get('eff_duration')
@end group
@end example

@end deftypefn
Dependencies of class:

 @image{Bond,15cm}

@node 	Position.help
@section 	Position.help
@cindex 	 Function 	Position.help
@c Copyright (C) 2012-2018 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@c Make the apostrophe in code examples cut-and-paste friendly.
@codequoteundirected on
@deftypefn{Octarisk Class} { @var{object} =} Position (@var{id})

Position and Portfolio class.

@itemize @bullet
@item @var{id} (string): id of object
@end itemize
@*

@end deftypefn
Dependencies of class:

 @image{Position,15cm}

@node 	Retail.help
@section 	Retail.help
@cindex 	 Function 	Retail.help
@c Copyright (C) 2012-2018 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@c The following macro marks words that aspell should ignore during
@c spellchecking.  Within Texinfo it has no effect as it merely replaces
@c the macro call with the argument itself.

@macro nospell {arg}
\arg\
@end macro

@c The following macro works around the Info/plain text expansion of @code{XXX}
@c which is `XXX'.  This looks particularly bad when the macro body is
@c single or double-quoted text, such as a property value `"position"'
@ifinfo
@macro qcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro qcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).
@c
@c Implementation Note:
@c For TeX, @vskip produces a nice separation.
@c For Texinfo, '@sp 1' should work, but in practice produces ugly results
@c for HTML.  We use a simple blank line to produce the correct behavior.

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex

@end ifnottex
@ifnotinfo
@noindent
@strong{See also:} \args\.
@end ifnotinfo
@ifinfo
@noindent
See also: \args\.
@end ifinfo
@end macro

@c The following macro works around a situation where the Info/plain text
@c expansion of the @code{XXX} macro is `XXX'.  The use of the apostrophe
@c can be confusing if the code segment itself ends with a transpose operator.
@ifinfo
@macro tcode{arg}
\arg\
@end macro
@end ifinfo
@ifnotinfo
@macro tcode{arg}
@code{\arg\}
@end macro
@end ifnotinfo

@c FIXME: someday, when Texinfo 5.X is standard, we might replace this with
@c @backslashchar, which is a new addition to Texinfo.

@macro xbackslashchar
\\
@end macro

@c These may be useful for all, not just for octave.texi.
@tex
  \ifx\rgbDarkRed\thisisundefined
    \def\rgbDarkRed{0.50 0.09 0.12}
  \fi
  \ifx\linkcolor\thisisundefined
    \relax
  \else
    \global\def\linkcolor{\rgbDarkRed}
  \fi
  \ifx\urlcolor\thisisundefined
    \relax
  \else
    \global\def\urlcolor{\rgbDarkRed}
  \fi
  \ifx\urefurlonlylinktrue\thisisundefined
    \relax
  \else
    \global\urefurlonlylinktrue
  \fi
@end tex

@c Make the apostrophe in code examples cut-and-paste friendly.
@codequoteundirected on
@deftypefn{Octarisk Class} {@var{object}} = Retail(@var{id})
@deftypefnx{Octarisk Class} {@var{object}} = Retail()

Class for setting up various Retail objects like saving plans with bonus or
defined contribution pension plans.
Cash flows are generated specific for each Retail sub type and subsequently
discounted to calculate the Retail value.

@itemize @bullet
@item DCP: Defined contribution savings plan with guaranteed value at maturity and surrender value.
@item SAVPLAN: Savings plan with optional bonus at maturity.
@end itemize

In the following, all methods and attributes are explained and a code example is given.

Methods for Retail object @var{obj}:
@itemize @bullet
@item Retail(@var{id}) or Retail(): Constructor of a Bond object. @var{id} is optional and specifies id and name of new object.

@item obj.set(@var{attribute},@var{value}): Setter method. Provide pairs of attributes and values. Values are checked for format and constraints.

@item obj.get(@var{attribute}): Getter method. Query the value of specified attribute.

@item obj.calc_value(@var{valuation_date},@var{scenario}, @var{discount_curve})
Calculate the net present value of cash flows of Bonds (including pricing of embedded options)

@item obj.rollout(@var{scenario}, @var{valuation_date}): used for SAVPLAN and DCP without redemption
@item obj.rollout(@var{scenario}, @var{valuation_date}, @var{discount_curve}): used for DCP with redemption

@item obj.calc_sensitivities(@var{valuation_date},@var{discount_curve})
Calculate numerical sensitivities for the given Retail instrument.

@item obj.calc_key_rates(@var{valuation_date},@var{discount_curve})
Calculate key rate sensitivities for the given Retail instrument.

@item obj.getValue(@var{scenario}): Return Retail value for given @var{scenario}.
Method inherited from Superclass @var{Instrument}

@item Retail.help(@var{format},@var{returnflag}): show this message. Format can be [plain text, html or texinfo].
If empty, defaults to plain text. Returnflag is boolean: True returns 
documentation string, false (default) returns empty string. [static method]
@end itemize

Attributes of Retail objects:
@itemize @bullet
@item @var{id}: Instrument id. Has to be unique identifier. (Default: empty string)
@item @var{name}: Instrument name. (Default: empty string)
@item @var{description}: Instrument description. (Default: empty string)
@item @var{value_base}: Base value of instrument of type real numeric. (Default: 0.0)
@item @var{currency}: Currency of instrument of type string. (Default: 'EUR')
During instrument valuation and aggregation, FX conversion takes place if corresponding FX rate is available.
@item @var{asset_class}: Asset class of instrument. (Default: 'derivative')
@item @var{type}: Type of instrument, specific for class. Set to 'Bond'.
@item @var{value_stress}: Line vector with instrument stress scenario values.
@item @var{value_mc}: Line vector with instrument scenario values.
MC values for several @var{timestep_mc} are stored in columns.
@item @var{timestep_mc}: String Cell array with MC timesteps. If new timesteps are set, values are automatically appended.
@end itemize

For illustration see the following example:
A monthly savings plan with extra payments and bonus at maturity is valuated.
The resulting base value (52803.383344) and effective duration (4.9362)is retrieved:
@example
@group

disp('Pricing Savings Plan');
rates_base = [0.0056,0.02456];
rates_stress = rates_base + [-0.05;-0.03;0.0;0.03;0.05];
valuation_date = '31-May-2019';
r = Retail();
r = r.set('Name','Test_SAVPLAN','sub_type','SAVPLAN', ...
'coupon_rate',0.0155,'coupon_generation_method', ...
'backward','term',1,'term_unit','months');
r = r.set('maturity_date','05-May-2024','compounding_type', ...
'simple','savings_rate',500);
r = r.set('savings_startdate','05-May-2014', ...
'savings_enddate','05-May-2021');
r = r.set('extra_payment_values',[17500], ...
'extra_payment_dates',cellstr('17-May-2019'), ...
'bonus_value_current',0.5,'bonus_value_redemption',0.15);
r = r.set('notice_period',3,'notice_period_unit','months');
r = r.rollout('base',valuation_date);
r = r.rollout('stress',valuation_date);
c = Curve();
c = c.set('id','IR_EUR','nodes',[365,7300]);
c = c.set('rates_base',rates_base,'rates_stress',rates_stress);
c = c.set('method_interpolation','linear');
r = r.calc_value(valuation_date,'base',c);
r = r.calc_value(valuation_date,'stress',c);
r = r.calc_sensitivities(valuation_date,c);
r = r.calc_key_rates(valuation_date,c);
r
@end group
@end example

@end deftypefn
Dependencies of class:

 @image{Retail,15cm}

